{"version":3,"file":"proton.min.js","sources":["../src/math/MathUtils.js","../src/math/Vector2D.js","../src/math/Span.js","../src/utils/WebGLUtil.js","../src/utils/DomUtil.js","../src/utils/ImgUtil.js","../src/utils/Util.js","../src/utils/PUID.js","../src/core/Pool.js","../src/debug/Stats.js","../src/events/EventDispatcher.js","../src/math/Integration.js","../src/core/Proton.js","../src/math/ease.js","../src/core/Particle.js","../src/utils/ColorUtil.js","../src/math/Polar2D.js","../src/math/Mat3.js","../src/math/ArraySpan.js","../src/math/Rectangle.js","../src/initialize/Rate.js","../src/initialize/Initialize.js","../src/initialize/Life.js","../src/zone/Zone.js","../src/zone/PointZone.js","../src/initialize/Position.js","../src/initialize/Velocity.js","../src/initialize/Mass.js","../src/initialize/Radius.js","../src/initialize/Body.js","../src/behaviour/Behaviour.js","../src/behaviour/Force.js","../src/behaviour/Attraction.js","../src/behaviour/RandomDrift.js","../src/behaviour/Gravity.js","../src/behaviour/Collision.js","../src/behaviour/CrossZone.js","../src/behaviour/Alpha.js","../src/behaviour/Scale.js","../src/behaviour/Rotate.js","../src/behaviour/Color.js","../src/behaviour/Repulsion.js","../src/behaviour/GravityWell.js","../src/initialize/InitializeUtil.js","../src/emitter/Emitter.js","../src/emitter/BehaviourEmitter.js","../src/emitter/FollowEmitter.js","../src/render/BaseRenderer.js","../src/render/CanvasRenderer.js","../src/render/DomRenderer.js","../src/render/EaselRenderer.js","../src/render/PixelRenderer.js","../src/render/PixiRenderer.js","../src/utils/MStack.js","../src/render/WebGLRenderer.js","../src/render/CustomRenderer.js","../src/zone/LineZone.js","../src/zone/CircleZone.js","../src/zone/RectZone.js","../src/zone/ImageZone.js","../src/debug/Debug.js","../src/polyfill/requestAnimationFrame.js","../src/index.js"],"sourcesContent":["const PI = 3.1415926;\r\n\r\nconst MathUtils = {\r\n\r\n    PI: PI,\r\n    PIx2: PI * 2,\r\n    PI_2: PI / 2,\r\n    PI_180: PI / 180,\r\n    N180_PI: 180 / PI,\r\n\r\n    randomAToB(a, b, INT) {\r\n        if (!INT)\r\n            return a + Math.random() * (b - a);\r\n        else\r\n            return Math.floor(Math.random() * (b - a)) + a;\r\n    },\r\n\r\n    randomFloating(center, f, INT) {\r\n        return this.randomAToB(center - f, center + f, INT);\r\n    },\r\n\r\n    randomZone(display) {},\r\n\r\n    degreeTransform(a) {\r\n        return a * PI / 180;\r\n    },\r\n\r\n    toColor16(num) {\r\n        return \"#\" + num.toString(16);\r\n    },\r\n\r\n    randomColor() {\r\n        return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);\r\n    }\r\n}\r\n\r\nexport default MathUtils;","import MathUtils from '../math/MathUtils';\r\n\r\nexport default class Vector2D {\r\n\r\n    constructor(x, y) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n    }\r\n\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    setX(x) {\r\n        this.x = x;\r\n        return this;\r\n    }\r\n\r\n    setY(y) {\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    getGradient() {\r\n        if (this.x != 0)\r\n            return Math.atan2(this.y, this.x);\r\n        else if (this.y > 0)\r\n            return MathUtils.PI_2;\r\n        else if (this.y < 0)\r\n            return -MathUtils.PI_2;\r\n    }\r\n\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    add(v, w) {\r\n        if (w !== undefined) {\r\n            return this.addVectors(v, w);\r\n        }\r\n\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    addXY(a, b) {\r\n        this.x += a;\r\n        this.y += b;\r\n\r\n        return this;\r\n    }\r\n\r\n    addVectors(a, b) {\r\n        this.x = a.x + b.x;\r\n        this.y = a.y + b.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    sub(v, w) {\r\n        if (w !== undefined) {\r\n            return this.subVectors(v, w);\r\n        }\r\n\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    subVectors(a, b) {\r\n        this.x = a.x - b.x;\r\n        this.y = a.y - b.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    divideScalar(s) {\r\n        if (s !== 0) {\r\n            this.x /= s;\r\n            this.y /= s;\r\n        } else {\r\n            this.set(0, 0);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    multiplyScalar(s) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n\r\n        return this;\r\n    }\r\n\r\n    negate() {\r\n        return this.multiplyScalar(-1);\r\n    }\r\n\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    normalize() {\r\n        return this.divideScalar(this.length());\r\n    }\r\n\r\n    distanceTo(v) {\r\n        return Math.sqrt(this.distanceToSquared(v));\r\n    }\r\n\r\n    rotate(tha) {\r\n        const x = this.x;\r\n        const y = this.y;\r\n\r\n        this.x = x * Math.cos(tha) + y * Math.sin(tha);\r\n        this.y = -x * Math.sin(tha) + y * Math.cos(tha);\r\n\r\n        return this;\r\n    }\r\n\r\n    distanceToSquared(v) {\r\n        const dx = this.x - v.x;\r\n        const dy = this.y - v.y;\r\n\r\n        return dx * dx + dy * dy;\r\n    }\r\n\r\n    lerp(v, alpha) {\r\n        this.x += (v.x - this.x) * alpha;\r\n        this.y += (v.y - this.y) * alpha;\r\n\r\n        return this;\r\n    }\r\n\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n\r\n    clear() {\r\n        this.x = 0.0;\r\n        this.y = 0.0;\r\n        return this;\r\n    }\r\n\r\n    clone() {\r\n        return new Vector2D(this.x, this.y);\r\n    }\r\n}","import Util from '../utils/Util';\r\nimport MathUtils from '../math/MathUtils';\r\n\r\nexport default class Span {\r\n\r\n\tconstructor(a, b, center) {\r\n\t\tthis.isArray = false;\r\n\r\n\t\tif (Util.isArray(a)) {\r\n\t\t\tthis.isArray = true;\r\n\t\t\tthis.a = a;\r\n\t\t} else {\r\n\t\t\tthis.a = Util.initValue(a, 1);\r\n\t\t\tthis.b = Util.initValue(b, this.a);\r\n\t\t\tthis.center = Util.initValue(center, false);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetValue(INT) {\r\n\t\tif (this.isArray) {\r\n\t\t\treturn this.a[Math.floor(this.a.length * Math.random())];\r\n\t\t} else {\r\n\t\t\tif (!this.center)\r\n\t\t\t\treturn MathUtils.randomAToB(this.a, this.b, INT);\r\n\t\t\telse\r\n\t\t\t\treturn MathUtils.randomFloating(this.a, this.b, INT);\r\n\t\t}\r\n\t}\r\n}","export default {\r\n\r\n    /**\r\n     * @memberof Proton#Proton.WebGLUtil\r\n     * @method ipot\r\n     *\r\n     * @todo add description\r\n     * @todo add length description\r\n     *\r\n     * @param {Number} length\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    ipot(length) {\r\n        return (length & (length - 1)) == 0;\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.WebGLUtil\r\n     * @method nhpot\r\n     *\r\n     * @todo add description\r\n     * @todo add length description\r\n     *\r\n     * @param {Number} length\r\n     *\r\n     * @return {Number}\r\n     */\r\n    nhpot(length) {\r\n        --length;\r\n        for (let i = 1; i < 32; i <<= 1) {\r\n            length = length | length >> i;\r\n        }\r\n\r\n        return length + 1;\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.WebGLUtil\r\n     * @method makeTranslation\r\n     *\r\n     * @todo add description\r\n     * @todo add tx, ty description\r\n     * @todo add return description\r\n     *\r\n     * @param {Number} tx either 0 or 1\r\n     * @param {Number} ty either 0 or 1\r\n     *\r\n     * @return {Object}\r\n     */\r\n    makeTranslation(tx, ty) {\r\n        return [1, 0, 0, 0, 1, 0, tx, ty, 1];\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.WebGLUtil\r\n     * @method makeRotation\r\n     *\r\n     * @todo add description\r\n     * @todo add return description\r\n     *\r\n     * @param {Number} angleInRadians\r\n     *\r\n     * @return {Object}\r\n     */\r\n    makeRotation(angleInRadians) {\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n\r\n        return [c, -s, 0, s, c, 0, 0, 0, 1];\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.WebGLUtil\r\n     * @method makeScale\r\n     *\r\n     * @todo add description\r\n     * @todo add tx, ty description\r\n     * @todo add return description\r\n     *\r\n     * @param {Number} sx either 0 or 1\r\n     * @param {Number} sy either 0 or 1\r\n     *\r\n     * @return {Object}\r\n     */\r\n    makeScale(sx, sy) {\r\n        return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.WebGLUtil\r\n     * @method matrixMultiply\r\n     *\r\n     * @todo add description\r\n     * @todo add a, b description\r\n     * @todo add return description\r\n     *\r\n     * @param {Object} a\r\n     * @param {Object} b\r\n     *\r\n     * @return {Object}\r\n     */\r\n    matrixMultiply(a, b) {\r\n        let a00 = a[0 * 3 + 0];\r\n        let a01 = a[0 * 3 + 1];\r\n        let a02 = a[0 * 3 + 2];\r\n        let a10 = a[1 * 3 + 0];\r\n        let a11 = a[1 * 3 + 1];\r\n        let a12 = a[1 * 3 + 2];\r\n        let a20 = a[2 * 3 + 0];\r\n        let a21 = a[2 * 3 + 1];\r\n        let a22 = a[2 * 3 + 2];\r\n        let b00 = b[0 * 3 + 0];\r\n        let b01 = b[0 * 3 + 1];\r\n        let b02 = b[0 * 3 + 2];\r\n        let b10 = b[1 * 3 + 0];\r\n        let b11 = b[1 * 3 + 1];\r\n        let b12 = b[1 * 3 + 2];\r\n        let b20 = b[2 * 3 + 0];\r\n        let b21 = b[2 * 3 + 1];\r\n        let b22 = b[2 * 3 + 2];\r\n\r\n        return [\r\n            a00 * b00 + a01 * b10 + a02 * b20,\r\n            a00 * b01 + a01 * b11 + a02 * b21,\r\n            a00 * b02 + a01 * b12 + a02 * b22,\r\n            a10 * b00 + a11 * b10 + a12 * b20,\r\n            a10 * b01 + a11 * b11 + a12 * b21,\r\n            a10 * b02 + a11 * b12 + a12 * b22,\r\n            a20 * b00 + a21 * b10 + a22 * b20,\r\n            a20 * b01 + a21 * b11 + a22 * b21,\r\n            a20 * b02 + a21 * b12 + a22 * b22\r\n        ];\r\n    }\r\n}","export default {\r\n\r\n    /**\r\n     * Creates and returns a new canvas. The opacity is by default set to 0\r\n     *\r\n     * @memberof Proton#Proton.DomUtil\r\n     * @method createCanvas\r\n     *\r\n     * @param {String} $id the canvas' id\r\n     * @param {Number} $width the canvas' width\r\n     * @param {Number} $height the canvas' height\r\n     * @param {String} [$position=absolute] the canvas' position, default is 'absolute' \r\n     *\r\n     * @return {Object}\r\n     */\r\n    createCanvas(id, width, height, position) {\r\n        const dom = document.createElement(\"canvas\");\r\n        position = position || 'absolute';\r\n\r\n        dom.id = id;\r\n        dom.width = width;\r\n        dom.height = height;\r\n        dom.style.opacity = 0;\r\n        dom.style.position = position;\r\n\r\n        this.transform(dom, -500, -500, 0, 0);\r\n\r\n        return dom;\r\n    },\r\n\r\n    createDiv(id, width, height) {\r\n        const dom = document.createElement(\"div\");\r\n\r\n        dom.id = id;\r\n        dom.style.position = 'absolute';\r\n        this.resize(dom, width, height);\r\n\r\n        return dom;\r\n    },\r\n\r\n    resize(dom, width, height) {\r\n        dom.style.width = width + 'px';\r\n        dom.style.height = height + 'px';\r\n        dom.style.marginLeft = -width / 2 + 'px';\r\n        dom.style.marginTop = -height / 2 + 'px';\r\n    },\r\n\r\n    /**\r\n     * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\r\n     *\r\n     * @memberof Proton#Proton.DomUtil\r\n     * @method transform\r\n     *\r\n     * @param {HTMLDivElement} div \r\n     * @param {Number} $x \r\n     * @param {Number} $y \r\n     * @param {Number} $scale \r\n     * @param {Number} $rotate \r\n     */\r\n    transform(div, x, y, scale, rotate) {\r\n        const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\r\n\r\n        div.style.willChange = 'transform';\r\n        this.css3(div, 'transform', transform);\r\n    },\r\n\r\n    transform3d(div, x, y, scale, rotate) {\r\n        const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\r\n\r\n        div.style.willChange = 'transform';\r\n        this.css3(div, 'backfaceVisibility', 'hidden');\r\n        this.css3(div, 'transform', transform);\r\n    },\r\n\r\n    css3(div, key, val) {\r\n        const bkey = key.charAt(0).toUpperCase() + key.substr(1);\r\n\r\n        div.style[`Webkit${bkey}`] = val;\r\n        div.style[`Moz${bkey}`] = val;\r\n        div.style[`O${bkey}`] = val;\r\n        div.style[`ms${bkey}`] = val;\r\n        div.style[`${key}`] = val;\r\n    }\r\n}","import WebGLUtil from './WebGLUtil';\r\nimport DomUtil from './DomUtil';\r\n\r\nconst IMG_CACHE = {};\r\nconst CANVAS_CACHE = {};\r\nlet canvasID = 0;\r\n\r\nexport default {\r\n\r\n    /**\r\n     * This will get the image data. It could be necessary to create a Proton.Zone.\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method getImageData\r\n     *\r\n     * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\r\n     * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\r\n     * @param {Proton.Rectangle}    rect\r\n     */\r\n    getImageData(context, image, rect) {\r\n        context.drawImage(image, rect.x, rect.y);\r\n        const imagedata = context.getImageData(rect.x, rect.y, rect.width, rect.height);\r\n        context.clearRect(rect.x, rect.y, rect.width, rect.height);\r\n\r\n        return imagedata;\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.Util\r\n     * @method getImgFromCache\r\n     *\r\n     * @todo add description\r\n     * @todo describe func\r\n     *\r\n     * @param {Mixed}               img\r\n     * @param {Proton.Particle}     particle\r\n     * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.transform.canvas\r\n     * @param {Boolean}             func\r\n     */\r\n    getImgFromCache(img, callback, param) {\r\n        const src = typeof (img) == 'string' ? img : img.src;\r\n\r\n        if (IMG_CACHE[src]) {\r\n            callback(IMG_CACHE[src], param);\r\n        } else {\r\n            const image = new Image();\r\n            image.onload = e => {\r\n                IMG_CACHE[src] = e.target;\r\n                callback(IMG_CACHE[src], param);\r\n            }\r\n\r\n            image.src = src;\r\n        }\r\n    },\r\n\r\n    getCanvasFromCache(img, callback, param) {\r\n        const src = img.src;\r\n\r\n        if (!CANVAS_CACHE[src]) {\r\n            const width = WebGLUtil.nhpot(img.width);\r\n            const height = WebGLUtil.nhpot(img.height);\r\n\r\n            const canvas = DomUtil.createCanvas(`canvas_cache_${canvasID}`, width, height);\r\n            const context = canvas.getContext('2d');\r\n            context.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n            CANVAS_CACHE[src] = canvas;\r\n        }\r\n\r\n        callback && callback(CANVAS_CACHE[src], param);\r\n\r\n        return CANVAS_CACHE[src];\r\n    }\r\n}","import Vector2D from '../math/Vector2D';\r\nimport Span from '../math/Span';\r\nimport ImgUtil from './ImgUtil';\r\nimport DomUtil from './DomUtil';\r\n\r\nexport default {\r\n\r\n    /**\r\n     * Returns the default if the value is null or undefined\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method initValue\r\n     *\r\n     * @param {Mixed} value a specific value, could be everything but null or undefined\r\n     * @param {Mixed} defaults the default if the value is null or undefined\r\n     */\r\n    initValue(value, defaults) {\r\n        value = (value !== null && value !== undefined) ? value : defaults;\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     * Checks if the value is a valid array\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method isArray\r\n     *\r\n     * @param {Array} value Any array\r\n     *\r\n     * @returns {Boolean} \r\n     */\r\n    isArray(value) {\r\n        return Object.prototype.toString.call(value) === '[object Array]';\r\n    },\r\n\r\n    /**\r\n     * Destroyes the given array\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method destroyArray\r\n     *\r\n     * @param {Array} array Any array\r\n     */\r\n    destroyArray(array) {\r\n        if (array) array.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Destroyes the given object\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method destroyObject\r\n     *\r\n     * @param {Object} obj Any object\r\n     */\r\n    destroyObject(obj, ignore) {\r\n        for (let o in obj) {\r\n            if (ignore && ignore.indexOf(o) > -1) continue;\r\n            delete obj[o];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Makes an instance of a class and binds the given array\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method classApply\r\n     *\r\n     * @param {Function} constructor A class to make an instance from\r\n     * @param {Array} [args] Any array to bind it to the constructor\r\n     *\r\n     * @return {Object} The instance of constructor, optionally bind with args\r\n     */\r\n    classApply(constructor, args) {\r\n        if (!args) return new constructor;\r\n\r\n        args = [null].concat(args);\r\n        const factoryFunction = constructor.bind.apply(constructor, args);\r\n        return new factoryFunction();\r\n    },\r\n\r\n    /**\r\n     * @memberof Proton#Proton.Util\r\n     * @method setVector2DByObject\r\n     *\r\n     * @todo add description for param `target`\r\n     * @todo add description for param `pOBJ`\r\n     * @todo add description for function\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} pOBJ\r\n     */\r\n    setVector2DByObject(target, pOBJ) {\r\n        if (this.hasProp(pOBJ, 'x')) target.p.x = pOBJ['x'];\r\n        if (this.hasProp(pOBJ, 'y')) target.p.y = pOBJ['y'];\r\n\r\n        if (this.hasProp(pOBJ, 'vx')) target.v.x = pOBJ['vx'];\r\n        if (this.hasProp(pOBJ, 'vy')) target.v.y = pOBJ['vy'];\r\n\r\n        if (this.hasProp(pOBJ, 'ax')) target.a.x = pOBJ['ax'];\r\n        if (this.hasProp(pOBJ, 'ay')) target.a.y = pOBJ['ay'];\r\n\r\n        if (this.hasProp(pOBJ, 'p')) particle.p.copy(pOBJ['p']);\r\n        if (this.hasProp(pOBJ, 'v')) particle.v.copy(pOBJ['v']);\r\n        if (this.hasProp(pOBJ, 'a')) particle.a.copy(pOBJ['a']);\r\n\r\n        if (this.hasProp(pOBJ, 'position')) particle.p.copy(pOBJ['position']);\r\n        if (this.hasProp(pOBJ, 'velocity')) particle.v.copy(pOBJ['velocity']);\r\n        if (this.hasProp(pOBJ, 'accelerate')) particle.a.copy(pOBJ['accelerate']);\r\n    },\r\n\r\n    hasProp(obj, key) {\r\n        if (!obj) return false;\r\n        return obj[key] !== undefined;\r\n        // return obj.hasOwnProperty(key);\r\n    },\r\n\r\n    /**\r\n     * set the prototype in a given prototypeObject\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method setPrototypeByObject\r\n     *\r\n     * @todo add description for param `target`\r\n     * @todo add description for param `filters`\r\n     * @todo translate desription from chinese to english\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} prototypeObject An object of single prototypes\r\n     * @param {Object} filters\r\n     *\r\n     * @return {Object} target\r\n     */\r\n    setPrototypeByObject(target, prototypeObject, filters) {\r\n        for (let singleProp in prototypeObject) {\r\n            if (target.hasOwnProperty(singleProp)) {\r\n                if (filters) {\r\n                    if (filters.indexOf(singleProp) < 0)\r\n                        target[singleProp] = this.getSpanValue(prototypeObject[singleProp]);\r\n                } else {\r\n                    target[singleProp] = this.getSpanValue(prototypeObject[singleProp]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return target;\r\n    },\r\n\r\n    /**\r\n     * Returns a new Span object\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method setSpanValue\r\n     *\r\n     * @todo a, b and c should be 'Mixed' or 'Number'?\r\n     *\r\n     * @param {Mixed | Span} a\r\n     * @param {Mixed}               b\r\n     * @param {Mixed}               c\r\n     *\r\n     * @return {Span}\r\n     */\r\n    setSpanValue(a, b, c) {\r\n        if (a instanceof Span) {\r\n            return a;\r\n        } else {\r\n            if (!b) {\r\n                return new Span(a);\r\n            } else {\r\n                if (!c)\r\n                    return new Span(a, b);\r\n                else\r\n                    return new Span(a, b, c);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns the value from a Span, if the param is not a Span it will return the given parameter\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method getSpanValue\r\n     *\r\n     * @param {Mixed | Span} pan\r\n     *\r\n     * @return {Mixed} the value of Span OR the parameter if it is not a Span\r\n     */\r\n    getSpanValue(pan) {\r\n        return pan instanceof Span ? pan.getValue() : pan;\r\n    },\r\n\r\n    /**\r\n     * This will get the image data. It could be necessary to create a Proton.Zone.\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method getImageData\r\n     *\r\n     * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\r\n     * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\r\n     * @param {Proton.Rectangle}    rect\r\n     */\r\n    getImageData(context, image, rect) {\r\n        return ImgUtil.getImageData(context, image, rect);\r\n    },\r\n\r\n    destroy(arr, param) {\r\n        let i = arr.length;\r\n\r\n        while (i--) {\r\n            try { arr[i].destroy(param); } catch (e) { }\r\n            delete arr[i];\r\n        }\r\n\r\n        arr.length = 0;\r\n    }\r\n\r\n}","export default {\r\n    id: 0,\r\n    cache: {},\r\n\r\n    getID(target) {\r\n        let uid = this.getCacheID(target);\r\n        if (uid) return uid;\r\n\r\n        uid = `PUID_${this.id++}`;\r\n        this.cache[uid] = target;\r\n\r\n        return uid;\r\n    },\r\n\r\n    getCacheID(target) {\r\n        let obj;\r\n        for (let id in this.cache) {\r\n            obj = this.cache[id];\r\n\r\n            if (obj === target) return id;\r\n            \r\n            if (typeof obj === 'object' && typeof target === 'object' && obj.isInner && target.isInner) {\r\n                if (obj.src === target.src)\r\n                    return id;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    getTarget(uid) {\r\n        return this.cache[uid];\r\n    }\r\n}","/**\r\n * get    -> PUID :: uid-> Body\r\n *        -> cache[abc].         -> cache[abc] .pop()\r\n *                               -> create [new Body| clone]\r\n *        -> return p1: { __pid: abc }\r\n * \r\n * expire -> cache[abc]= [p0, p1];\r\n * \r\n */\r\nimport Util from '../utils/Util';\r\nimport PUID from '../utils/PUID';\r\n\r\nexport default class Pool {\r\n\r\n    /**\r\n     * @memberof! Proton#\r\n     * @constructor\r\n     * @alias Proton.Pool\r\n     *\r\n     * @todo add description\r\n     * @todo add description of properties\r\n     *\r\n     * @property {Number} total\r\n     * @property {Object} cache\r\n     */\r\n    constructor(num) {\r\n        this.total = 0;\r\n        this.cache = {};\r\n    }\r\n\r\n    /**\r\n     * @todo add description\r\n     *\r\n     * @method get\r\n     * @memberof Proton#Proton.Pool\r\n     *\r\n     * @param {Object|Function} target\r\n     * @param {Object} [params] just add if `target` is a function\r\n     *\r\n     * @return {Object}\r\n     */\r\n    get(target, params, uid) {\r\n        let p;\r\n        uid = uid || target.__puid || PUID.getID(target);\r\n\r\n        if (this.cache[uid] && this.cache[uid].length > 0)\r\n            p = this.cache[uid].pop();\r\n        else\r\n            p = this.createOrClone(target, params);\r\n\r\n        p.__puid = target.__puid || uid;\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * @todo add description\r\n     *\r\n     * @method set\r\n     * @memberof Proton#Proton.Pool\r\n     *\r\n     * @param {Object} target\r\n     *\r\n     * @return {Object}\r\n     */\r\n    expire(target) {\r\n        return this.getCache(target.__puid).push(target);\r\n    }\r\n\r\n    /**\r\n     * Creates a new class instance\r\n     *\r\n     * @todo add more documentation \r\n     *\r\n     * @method create\r\n     * @memberof Proton#Proton.Pool\r\n     *\r\n     * @param {Object|Function} target any Object or Function\r\n     * @param {Object} [params] just add if `target` is a function\r\n     *\r\n     * @return {Object}\r\n     */\r\n    createOrClone(target, params) {\r\n        this.total++;\r\n\r\n        if (this.create) {\r\n            return this.create(target, params);\r\n        } else if (typeof target == \"function\") {\r\n            return Util.classApply(target, params);\r\n        } else {\r\n            return target.clone();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @todo add description - what is in the cache?\r\n     *\r\n     * @method getCount\r\n     * @memberof Proton#Proton.Pool\r\n     *\r\n     * @return {Number}\r\n     */\r\n    getCount() {\r\n        let count = 0;\r\n\r\n        for (let id in this.cache)\r\n            count += this.cache[id].length;\r\n\r\n        return count++;;\r\n    }\r\n\r\n    /**\r\n     * Destroyes all items from Pool.cache\r\n     *\r\n     * @method destroy\r\n     * @memberof Proton#Proton.Pool\r\n     */\r\n    destroy() {\r\n        for (let id in this.cache) {\r\n            this.cache[id].length = 0;\r\n            delete this.cache[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns Pool.cache\r\n     *\r\n     * @method getCache\r\n     * @memberof Proton#Proton.Pool\r\n     * @private\r\n     *\r\n     * @param {Number} uid the unique id\r\n     *\r\n     * @return {Object}\r\n     */\r\n    getCache(uid) {\r\n        uid = uid || \"default\";\r\n\r\n        if (!this.cache[uid]) this.cache[uid] = [];\r\n        return this.cache[uid];\r\n    }\r\n}","export default class Stats {\r\n\r\n    constructor(proton) {\r\n        this.proton = proton;\r\n        this.container = null;\r\n        this.type = 1;\r\n\r\n        this.emitterIndex = 0;\r\n        this.rendererIndex = 0;\r\n    }\r\n\r\n    update(style, body) {\r\n        this.add(style, body);\r\n\r\n        const emitter = this.getEmitter();\r\n        const renderer = this.getRenderer();\r\n        let str = \"\";\r\n\r\n        switch (this.type) {\r\n            case 2:\r\n                str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\r\n                if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\r\n                if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\r\n                break;\r\n\r\n            case 3:\r\n                if (emitter) str += \"initializes:\" + emitter.initializes.length + \"<br>\";\r\n                if (emitter) str += \"<span style='display:inline-block;'>\" + this.concatArr(emitter.initializes) + \"</span><br>\";\r\n                if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\r\n                if (emitter) str += \"<span style='display:inline-block;'>\" + this.concatArr(emitter.behaviours) + \"</span><br>\";\r\n                break;\r\n\r\n            case 4:\r\n                if (renderer) str += renderer.name + \"<br>\";\r\n                if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\r\n                break;\r\n\r\n            default:\r\n                str += \"particles:\" + this.proton.getCount() + \"<br>\";\r\n                str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\r\n                str += \"total:\" + this.proton.pool.total;\r\n        }\r\n\r\n        this.container.innerHTML = str;\r\n    }\r\n\r\n    add(style, body) {\r\n        if (!this.container) {\r\n            this.type = 1;\r\n\r\n            this.container = document.createElement('div');\r\n            this.container.style.cssText = [\r\n                'position:absolute;bottom:0px;left:0;cursor:pointer;',\r\n                'opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;',\r\n                'width:120px;height:50px;background-color:#002;color:#0ff;'\r\n            ].join('');\r\n\r\n            this.container.addEventListener('click', e => {\r\n                this.type++;\r\n                if (this.type > 4) this.type = 1;\r\n            }, false);\r\n\r\n            let bg, color;\r\n            switch (style) {\r\n                case 2:\r\n                    bg = \"#201\";\r\n                    color = \"#f08\";\r\n                    break;\r\n\r\n                case 3:\r\n                    bg = \"#020\";\r\n                    color = \"#0f0\";\r\n                    break;\r\n\r\n                default:\r\n                    bg = \"#002\";\r\n                    color = \"#0ff\";\r\n            }\r\n\r\n            this.container.style[\"background-color\"] = bg;\r\n            this.container.style[\"color\"] = color;\r\n        }\r\n\r\n        if (!this.container.parentNode) {\r\n            body = body || this.body || document.body;\r\n            body.appendChild(this.container);\r\n        }\r\n    }\r\n\r\n    getEmitter() {\r\n        return this.proton.emitters[this.emitterIndex];\r\n    }\r\n\r\n    getRenderer() {\r\n        return this.proton.renderers[this.rendererIndex];\r\n    }\r\n\r\n    concatArr(arr) {\r\n        let result = '';\r\n        if (!arr || !arr.length) return result;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            result += (arr[i].name || '').substr(0, 1) + '.';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getCreatedNumber(renderer) {\r\n        return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\r\n    }\r\n\r\n    getEmitterPos(e) {\r\n        return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\r\n    }\r\n}","/*\r\n * EventDispatcher\r\n * This code reference since http://createjs.com/.\r\n *\r\n **/\r\n\r\nexport default class EventDispatcher {\r\n\r\n    constructor() {\r\n        this._listeners = null;\r\n    }\r\n\r\n    static bind(TargetClass){\r\n        TargetClass.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\r\n        TargetClass.prototype.hasEventListener = EventDispatcher.prototype.hasEventListener;\r\n        TargetClass.prototype.addEventListener = EventDispatcher.prototype.addEventListener;\r\n        TargetClass.prototype.removeEventListener = EventDispatcher.prototype.removeEventListener;\r\n        TargetClass.prototype.removeAllEventListeners = EventDispatcher.prototype.removeAllEventListeners;\r\n    }\r\n\r\n    addEventListener(type, listener) {\r\n        if (!this._listeners) {\r\n            this._listeners = {};\r\n        } else {\r\n            this.removeEventListener(type, listener);\r\n        }\r\n\r\n        if (!this._listeners[type]) this._listeners[type] = [];\r\n        this._listeners[type].push(listener);\r\n\r\n        return listener;\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        if (!this._listeners) return;\r\n        if (!this._listeners[type]) return;\r\n\r\n        const arr = this._listeners[type];\r\n        const length = arr.length;\r\n\r\n        for (let i = 0;i < length; i++) {\r\n            if (arr[i] == listener) {\r\n                if (length == 1) {\r\n                    delete (this._listeners[type]);\r\n                }\r\n\r\n                // allows for faster checks.\r\n                else {\r\n                    arr.splice(i, 1);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeAllEventListeners(type) {\r\n        if (!type)\r\n            this._listeners = null;\r\n        else if (this._listeners)\r\n            delete (this._listeners[type]);\r\n    }\r\n\r\n    dispatchEvent(type, args) {\r\n        let result = false;\r\n        const listeners = this._listeners;\r\n\r\n        if (type && listeners) {\r\n            let arr = listeners[type];\r\n            if (!arr) return result;\r\n\r\n            //arr = arr.slice();\r\n            // to avoid issues with items being removed or added during the dispatch\r\n\r\n            let handler;\r\n            let i = arr.length;\r\n            while (i--) {\r\n                handler = arr[i];\r\n                result = result || handler(args);\r\n            }\r\n\r\n        }\r\n\r\n        return !!result;\r\n    }\r\n\r\n    hasEventListener(type) {\r\n        const listeners = this._listeners;\r\n        return !!(listeners && listeners[type]);\r\n    }\r\n\r\n}","import Util from '../utils/Util';\r\n\r\nexport default class Integration {\r\n\r\n\tconstructor(type) {\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\tcalculate(particles, time, damping) {\r\n\t\tthis.eulerIntegrate(particles, time, damping);\r\n\t}\r\n\r\n\t// Euler Integrate\r\n\teulerIntegrate(particle, time, damping) {\r\n\t\tif (!particle.sleep) {\r\n\t\t\tparticle.old.p.copy(particle.p);\r\n\t\t\tparticle.old.v.copy(particle.v);\r\n\r\n\t\t\tparticle.a.multiplyScalar(1 / particle.mass);\r\n\t\t\tparticle.v.add(particle.a.multiplyScalar(time));\r\n\t\t\tparticle.p.add(particle.old.v.multiplyScalar(time));\r\n\r\n\t\t\tif (damping) particle.v.multiplyScalar(damping);\r\n\r\n\t\t\tparticle.a.clear();\r\n\t\t}\r\n\t}\r\n}","import Pool from './Pool';\r\nimport Util from '../utils/Util';\r\nimport Stats from '../debug/Stats';\r\nimport EventDispatcher from '../events/EventDispatcher';\r\nimport Integration from '../math/Integration';\r\n\r\nexport default class Proton {\r\n\r\n    static USE_CLOCK = false;\r\n\r\n    //1:100\r\n    static MEASURE = 100;\r\n    static EULER = 'euler';\r\n    static RK2 = 'runge-kutta2';\r\n\r\n    static PARTICLE_CREATED = 'PARTICLE_CREATED';\r\n    static PARTICLE_UPDATE = 'PARTICLE_UPDATE';\r\n    static PARTICLE_SLEEP = 'PARTICLE_SLEEP';\r\n    static PARTICLE_DEAD = 'PARTICLE_DEAD';\r\n    static PROTON_UPDATE = 'PROTON_UPDATE';\r\n    static PROTON_UPDATE_AFTER = 'PROTON_UPDATE_AFTER';\r\n    static EMITTER_ADDED = 'EMITTER_ADDED';\r\n    static EMITTER_REMOVED = 'EMITTER_REMOVED';\r\n\r\n    static amendChangeTabsBug = true;\r\n\r\n    /**\r\n     * The constructor to add emitters\r\n     *\r\n     * @constructor Proton\r\n     *\r\n     * @todo proParticleCount is not in use\r\n     * @todo add more documentation of the single properties and parameters\r\n     *\r\n     * @param {Number} [proParticleCount] not in use?\r\n     * @param {Number} [integrationType=Proton.EULER]\r\n     *\r\n     * @property {String} [integrationType=Proton.EULER]\r\n     * @property {Array} emitters   All added emitter\r\n     * @property {Array} renderers  All added renderer\r\n     * @property {Number} time      The active time\r\n     * @property {Number} oldtime   The old time\r\n     */\r\n    constructor(integrationType) {\r\n\r\n        this.emitters = [];\r\n        this.renderers = [];\r\n\r\n        this.time = 0;\r\n        this.oldTime = 0;\r\n        this.elapsed = 0;\r\n\r\n        this.stats = new Stats(this);\r\n        this.pool = new Pool(80);\r\n\r\n        this.integrationType = Util.initValue(integrationType, Proton.EULER);\r\n        this.integrator = new Integration(this.integrationType);\r\n    }\r\n\r\n    /**\r\n    * add a type of Renderer\r\n    *\r\n    * @method addRenderer\r\n    * @memberof Proton\r\n    * @instance\r\n    *\r\n    * @param {Renderer} render\r\n    */\r\n    addRenderer(render) {\r\n        render.init(this);\r\n        this.renderers.push(render);\r\n    }\r\n\r\n    /**\r\n    * @name add a type of Renderer\r\n    *\r\n    * @method addRenderer\r\n    * @param {Renderer} render\r\n    */\r\n    removeRenderer(render) {\r\n        const index = this.renderers.indexOf(render);\r\n        this.renderers.splice(index, 1);\r\n        render.remove(this);\r\n    }\r\n\r\n    /**\r\n     * add the Emitter\r\n     *\r\n     * @method addEmitter\r\n     * @memberof Proton\r\n     * @instance\r\n     *\r\n     * @param {Emitter} emitter\r\n     */\r\n    addEmitter(emitter) {\r\n        this.emitters.push(emitter);\r\n        emitter.parent = this;\r\n\r\n        this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\r\n    }\r\n\r\n    /**\r\n     * Removes an Emitter\r\n     *\r\n     * @method removeEmitter\r\n     * @memberof Proton\r\n     * @instance\r\n     *\r\n     * @param {Proton.Emitter} emitter\r\n     */\r\n    removeEmitter(emitter) {\r\n        const index = this.emitters.indexOf(emitter);\r\n        this.emitters.splice(index, 1);\r\n        emitter.parent = null;\r\n\r\n        this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\r\n    }\r\n\r\n    /**\r\n     * Updates all added emitters\r\n     *\r\n     * @method update\r\n     * @memberof Proton\r\n     * @instance\r\n     */\r\n    update() {\r\n        this.dispatchEvent(Proton.PROTON_UPDATE);\r\n\r\n        if (Proton.USE_CLOCK) {\r\n            if (!this.oldTime) this.oldTime = (new Date()).getTime();\r\n\r\n            let time = new Date().getTime();\r\n            this.elapsed = (time - this.oldTime) / 1000;\r\n            Proton.amendChangeTabsBug && this.amendChangeTabsBug();\r\n\r\n            this.oldTime = time;\r\n        } else {\r\n            this.elapsed = 0.0167;\r\n        }\r\n\r\n        // emitter update\r\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\r\n\r\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\r\n    }\r\n\r\n    emittersUpdate(elapsed) {\r\n        let i = this.emitters.length;\r\n        while (i--) this.emitters[i].update(elapsed);\r\n    }\r\n\r\n    /**\r\n     * @todo add description\r\n     *\r\n     * @method amendChangeTabsBug\r\n     * @memberof Proton\r\n     * @instance\r\n     */\r\n    amendChangeTabsBug() {\r\n        if (this.elapsed > .5) {\r\n            this.oldTime = (new Date()).getTime();\r\n            this.elapsed = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Counts all particles from all emitters\r\n     *\r\n     * @method getCount\r\n     * @memberof Proton\r\n     * @instance\r\n     */\r\n    getCount() {\r\n        let total = 0;\r\n        let i = this.emitters.length;\r\n\r\n        while (i--) total += this.emitters[i].particles.length;\r\n        return total;\r\n    }\r\n\r\n    getAllParticles() {\r\n        let particles = [];\r\n        let i = this.emitters.length;\r\n\r\n        while (i--) particles = particles.concat(this.emitters[i].particles);\r\n        return particles;\r\n    }\r\n\r\n    /**\r\n     * Destroys everything related to this Proton instance. This includes all emitters, and all properties\r\n     *\r\n     * @method destroy\r\n     * @memberof Proton\r\n     * @instance\r\n     */\r\n    destroy() {\r\n        Util.destroy(this.renderers, this.getAllParticles());\r\n        Util.destroy(this.emitters);\r\n\r\n        this.time = 0;\r\n        this.oldTime = 0;\r\n\r\n        this.pool.destroy();\r\n    }\r\n}\r\n\r\nEventDispatcher.bind(Proton);","import MathUtils from './MathUtils';\r\n\r\nexport default {\r\n\r\n    easeLinear(value) {\r\n        return value;\r\n    },\r\n\r\n    easeInQuad(value) {\r\n        return Math.pow(value, 2);\r\n    },\r\n\r\n    easeOutQuad(value) {\r\n        return -(Math.pow((value - 1), 2) - 1);\r\n    },\r\n\r\n    easeInOutQuad(value) {\r\n        if ((value /= 0.5) < 1)\r\n            return 0.5 * Math.pow(value, 2);\r\n\r\n        return -0.5 * ((value -= 2) * value - 2);\r\n    },\r\n\r\n    easeInCubic(value) {\r\n        return Math.pow(value, 3);\r\n    },\r\n\r\n    easeOutCubic(value) {\r\n        return (Math.pow((value - 1), 3) + 1);\r\n    },\r\n\r\n    easeInOutCubic(value) {\r\n        if ((value /= 0.5) < 1)\r\n            return 0.5 * Math.pow(value, 3);\r\n\r\n        return 0.5 * (Math.pow((value - 2), 3) + 2);\r\n    },\r\n\r\n    easeInQuart(value) {\r\n        return Math.pow(value, 4);\r\n    },\r\n\r\n    easeOutQuart(value) {\r\n        return -(Math.pow((value - 1), 4) - 1);\r\n    },\r\n\r\n    easeInOutQuart(value) {\r\n        if ((value /= 0.5) < 1)\r\n            return 0.5 * Math.pow(value, 4);\r\n\r\n        return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\r\n    },\r\n\r\n    easeInSine(value) {\r\n        return -Math.cos(value * (MathUtils.PI_2)) + 1;\r\n    },\r\n\r\n    easeOutSine(value) {\r\n        return Math.sin(value * (MathUtils.PI_2));\r\n    },\r\n\r\n    easeInOutSine(value) {\r\n        return (-0.5 * (Math.cos(MathUtils.PI * value) - 1));\r\n    },\r\n\r\n    easeInExpo(value) {\r\n        return (value === 0) ? 0 : Math.pow(2, 10 * (value - 1));\r\n    },\r\n\r\n    easeOutExpo(value) {\r\n        return (value === 1) ? 1 : -Math.pow(2, -10 * value) + 1;\r\n    },\r\n\r\n    easeInOutExpo(value) {\r\n        if (value === 0)\r\n            return 0;\r\n\r\n        if (value === 1)\r\n            return 1;\r\n\r\n        if ((value /= 0.5) < 1)\r\n            return 0.5 * Math.pow(2, 10 * (value - 1));\r\n\r\n        return 0.5 * (-Math.pow(2, -10 * --value) + 2);\r\n    },\r\n\r\n    easeInCirc(value) {\r\n        return -(Math.sqrt(1 - (value * value)) - 1);\r\n    },\r\n\r\n    easeOutCirc(value) {\r\n        return Math.sqrt(1 - Math.pow((value - 1), 2));\r\n    },\r\n\r\n    easeInOutCirc(value) {\r\n        if ((value /= 0.5) < 1)\r\n            return -0.5 * (Math.sqrt(1 - value * value) - 1);\r\n        return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\r\n    },\r\n\r\n    easeInBack(value) {\r\n        let s = 1.70158;\r\n        return (value) * value * ((s + 1) * value - s);\r\n    },\r\n\r\n    easeOutBack(value) {\r\n        let s = 1.70158;\r\n        return (value = value - 1) * value * ((s + 1) * value + s) + 1;\r\n    },\r\n\r\n    easeInOutBack(value) {\r\n        let s = 1.70158;\r\n        if ((value /= 0.5) < 1)\r\n            return 0.5 * (value * value * (((s *= (1.525)) + 1) * value - s));\r\n        return 0.5 * ((value -= 2) * value * (((s *= (1.525)) + 1) * value + s) + 2);\r\n    },\r\n\r\n    getEasing(ease) {\r\n        if (typeof ease === 'function')\r\n            return ease;\r\n        else\r\n            return this[ease] || this.easeLinear;\r\n    }\r\n};","import Util from '../utils/Util';\r\nimport ease from '../math/ease';\r\nimport Vector2D from '../math/Vector2D';\r\nimport MathUtils from '../math/MathUtils';\r\n\r\nexport default class Particle {\r\n\r\n    static ID = 0;\r\n\r\n    /**\r\n     * the Particle class\r\n     *\r\n     * @class Proton.Particle\r\n     * @constructor\r\n     * @param {Object} pObj the parameters object;\r\n     * for example {life:3,dead:false}\r\n     */\r\n    constructor(pOBJ) {\r\n        /**\r\n         * The particle's id;\r\n         * @property id\r\n         * @type {string}\r\n         */\r\n        this.id = `particle_${Particle.ID++}`;\r\n        this.reset('init');\r\n\r\n        pOBJ && Util.setPrototypeByObject(this, pOBJ);\r\n    }\r\n\r\n    getDirection() {\r\n        return Math.atan2(this.v.x, -this.v.y) * MathUtils.N180_PI;\r\n    }\r\n\r\n    reset(init) {\r\n        this.life = Infinity;\r\n        this.age = 0;\r\n\r\n        //Energy loss\r\n        this.energy = 1;\r\n        this.dead = false;\r\n        this.sleep = false;\r\n        this.body = null;\r\n        this.sprite = null;\r\n        this.parent = null;\r\n\r\n        this.mass = 1;\r\n        this.radius = 10;\r\n        this.alpha = 1;\r\n        this.scale = 1;\r\n        this.rotation = 0;\r\n        this.color = null;\r\n\r\n        this.easing = ease.easeLinear;\r\n\r\n        if (init == 'init') {\r\n            this.transform = {};\r\n            this.p = new Vector2D();\r\n            this.v = new Vector2D();\r\n            this.a = new Vector2D();\r\n\r\n            this.old = {\r\n                p: new Vector2D(),\r\n                v: new Vector2D(),\r\n                a: new Vector2D()\r\n            };\r\n\r\n            this.behaviours = [];\r\n        } else {\r\n            Util.destroyObject(this.transform, 'rgb');\r\n\r\n            this.p.set(0, 0);\r\n            this.v.set(0, 0);\r\n            this.a.set(0, 0);\r\n\r\n            this.old.p.set(0, 0);\r\n            this.old.v.set(0, 0);\r\n            this.old.a.set(0, 0);\r\n\r\n            this.removeAllBehaviours();\r\n        }\r\n\r\n        if (!this.transform.rgb) {\r\n            this.transform.rgb = { r: 255, g: 255, b: 255 };\r\n        } else {\r\n            this.transform.rgb.r = 255;\r\n            this.transform.rgb.g = 255;\r\n            this.transform.rgb.b = 255;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    update(time, index) {\r\n        if (!this.sleep) {\r\n            this.age += time;\r\n            this.applyBehaviours(time, index);\r\n        }\r\n\r\n        if (this.age < this.life) {\r\n            const scale = this.easing(this.age / this.life);\r\n            this.energy = Math.max(1 - scale, 0);\r\n        } else {\r\n            this.destroy();\r\n        }\r\n    }\r\n\r\n    applyBehaviours(time, index) {\r\n        const length = this.behaviours.length;\r\n        let i;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            this.behaviours[i] && this.behaviours[i].applyBehaviour(this, time, index)\r\n        }\r\n    }\r\n\r\n    addBehaviour(behaviour) {\r\n        this.behaviours.push(behaviour);\r\n\r\n        if (behaviour.hasOwnProperty('parents')) behaviour.parents.push(this);\r\n        behaviour.initialize(this);\r\n    }\r\n\r\n    addBehaviours(behaviours) {\r\n        const length = behaviours.length;\r\n        let i;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            this.addBehaviour(behaviours[i]);\r\n        }\r\n    }\r\n\r\n    removeBehaviour(behaviour) {\r\n        const index = this.behaviours.indexOf(behaviour);\r\n\r\n        if (index > -1) {\r\n            const behaviour = this.behaviours.splice(index, 1);\r\n            behaviour.parents = null;\r\n        }\r\n    }\r\n\r\n    removeAllBehaviours() {\r\n        Util.destroyArray(this.behaviours);\r\n    }\r\n\r\n    /**\r\n     * Destory this particle\r\n     * @method destroy\r\n     */\r\n    destroy() {\r\n        this.removeAllBehaviours();\r\n        this.energy = 0;\r\n        this.dead = true;\r\n        this.parent = null;\r\n    }\r\n\r\n}","export default {\r\n\r\n    /**\r\n     * @typedef  {Object} rgbObject\r\n     * @property {Number} r red value\r\n     * @property {Number} g green value\r\n     * @property {Number} b blue value\r\n     */\r\n    /**\r\n     * converts a hex value to a rgb object\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method hexToRGB\r\n     *\r\n     * @param {String} h any hex value, e.g. #000000 or 000000 for black\r\n     *\r\n     * @return {rgbObject}\r\n     */\r\n    hexToRGB(h) {\r\n        const hex16 = (h.charAt(0) == \"#\") ? h.substring(1, 7) : h;\r\n        const r = parseInt(hex16.substring(0, 2), 16);\r\n        const g = parseInt(hex16.substring(2, 4), 16);\r\n        const b = parseInt(hex16.substring(4, 6), 16);\r\n\r\n        return { r, g, b };\r\n    },\r\n\r\n    /**\r\n     * converts a rgb value to a rgb string\r\n     *\r\n     * @memberof Proton#Proton.Util\r\n     * @method rgbToHex\r\n     *\r\n     * @param {Object | Proton.hexToRGB} rgb a rgb object like in {@link Proton#Proton.}\r\n     *\r\n     * @return {String} rgb()\r\n     */\r\n    rgbToHex(rbg) {\r\n        return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\r\n    },\r\n\r\n    getHex16FromParticle(p) {\r\n        return Number(p.transform.rgb.r) * 65536 + Number(p.transform.rgb.g) * 256 + Number(p.transform.rgb.b);\r\n    }\r\n}","import Vector2D from './Vector2D';\r\n\r\nexport default class Polar2D {\r\n\r\n\tconstructor(r, tha) {\r\n\t\tthis.r = Math.abs(r) || 0;\r\n\t\tthis.tha = tha || 0;\r\n\t}\r\n\r\n\tset(r, tha) {\r\n\t\tthis.r = r;\r\n\t\tthis.tha = tha;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetR(r) {\r\n\t\tthis.r = r;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetTha(tha) {\r\n\t\tthis.tha = tha;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcopy(p) {\r\n\t\tthis.r = p.r;\r\n\t\tthis.tha = p.tha;\r\n\t\treturn this;\r\n\t}\r\n\r\n\ttoVector() {\r\n\t\treturn new Vector2D(this.getX(), this.getY());\r\n\t}\r\n\r\n\tgetX() {\r\n\t\treturn this.r * Math.sin(this.tha);\r\n\t}\r\n\r\n\tgetY() {\r\n\t\treturn -this.r * Math.cos(this.tha);\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tthis.r = 1;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tequals(v) {\r\n\t\treturn ((v.r === this.r) && (v.tha === this.tha));\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.r = 0.0;\r\n\t\tthis.tha = 0.0;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tclone() {\r\n\t\treturn new Polar2D(this.r, this.tha);\r\n\t}\r\n}","export default {\r\n\tcreate(mat3) {\r\n\t\tconst mat = new Float32Array(9);\r\n\t\tif (mat3) this.set(mat3, mat);\r\n\r\n\t\treturn mat;\r\n\t},\r\n\r\n\tset(mat1, mat2) {\r\n\t\tfor (let i = 0; i < 9; i++)\r\n\t\t\tmat2[i] = mat1[i];\r\n\r\n\t\treturn mat2;\r\n\t},\r\n\r\n\tmultiply(mat, mat2, mat3) {\r\n\t\tlet a00 = mat[0], a01 = mat[1], a02 = mat[2], a10 = mat[3], a11 = mat[4], a20 = mat[6], a21 = mat[7], b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b10 = mat2[3], b11 = mat2[4], b20 = mat2[6], b21 = mat2[7];\r\n\r\n\t\tmat3[0] = b00 * a00 + b01 * a10;\r\n\t\tmat3[1] = b00 * a01 + b01 * a11;\r\n\t\tmat3[2] = a02 * b02;\r\n\t\tmat3[3] = b10 * a00 + b11 * a10;\r\n\t\tmat3[4] = b10 * a01 + b11 * a11;\r\n\t\tmat3[6] = b20 * a00 + b21 * a10 + a20;\r\n\t\tmat3[7] = b20 * a01 + b21 * a11 + a21;\r\n\r\n\t\treturn mat3;\r\n\t},\r\n\r\n\tinverse(mat, mat3) {\r\n\t\tlet a00 = mat[0], a01 = mat[1], a10 = mat[3], a11 = mat[4], a20 = mat[6], a21 = mat[7], b01 = a11, b11 = -a10, b21 = a21 * a10 - a11 * a20, d = a00 * b01 + a01 * b11, id;\r\n\r\n\t\tid = 1 / d;\r\n\t\tmat3[0] = b01 * id;\r\n\t\tmat3[1] = (-a01) * id;\r\n\t\tmat3[3] = b11 * id;\r\n\t\tmat3[4] = a00 * id;\r\n\t\tmat3[6] = b21 * id;\r\n\t\tmat3[7] = (-a21 * a00 + a01 * a20) * id;\r\n\r\n\t\treturn mat3;\r\n\t},\r\n\r\n\tmultiplyVec2(m, vec, mat3) {\r\n\t\tlet x = vec[0], y = vec[1];\r\n\r\n\t\tmat3[0] = x * m[0] + y * m[3] + m[6];\r\n\t\tmat3[1] = x * m[1] + y * m[4] + m[7];\r\n\r\n\t\treturn mat3;\r\n\t}\r\n}","import Span from './Span';\r\nimport Util from '../utils/Util';\r\nimport MathUtils from './MathUtils';\r\n\r\nexport default class ArraySpan extends Span {\r\n\r\n    constructor(color) {\r\n        super();\r\n        this._arr = Util.isArray(color) ? color : [color];\r\n    }\r\n\r\n    getValue() {\r\n        const color = this._arr[Math.floor(this._arr.length * Math.random())];\r\n        return color === 'random' || color === 'Random' ? MathUtils.randomColor() : color;\r\n    }\r\n\r\n    /**\r\n     * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\r\n     *\r\n     * @method setSpanValue\r\n     * @memberof Proton#Proton.Color\r\n     * @instance\r\n     *\r\n     * @param {Proton.Particle} particle\r\n     * @param {Number} the integrate time 1/ms\r\n     * @param {Int} the particle index\r\n     */\r\n    static createArraySpan(arr) {\r\n        if (!arr) return null;\r\n\r\n        if (arr instanceof ArraySpan)\r\n            return arr;\r\n        else\r\n            return new ArraySpan(arr);\r\n    }\r\n\r\n}","export default class Rectangle {\r\n\r\n\tconstructor(x, y, w, h) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\tthis.width = w;\r\n\t\tthis.height = h;\r\n\r\n\t\tthis.bottom = this.y + this.height;\r\n\t\tthis.right = this.x + this.width;\r\n\t}\r\n\r\n\tcontains(x, y) {\r\n\t\tif (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n}\r\n","import Util from '../utils/Util';\r\n\r\nexport default class Rate {\r\n\r\n\t/**\r\n\t * The number of particles per second emission (a [particle]/b [s]);\r\n\t * @namespace\r\n\t * @memberof! Proton#\r\n\t * @constructor\r\n\t * @alias Rate\r\n\t *\r\n\t * @param {Array | Number | Span} numpan the number of each emission;\r\n\t * @param {Array | Number | Span} timepan the time of each emission;\r\n\t * for example: new Rate(new Span(10, 20), new Span(.1, .25));\r\n\t */\r\n\tconstructor(numpan, timepan) {\r\n\t\tthis.numPan = Util.setSpanValue(Util.initValue(numpan, 1));\r\n\t\tthis.timePan = Util.setSpanValue(Util.initValue(timepan, 1));\r\n\r\n\t\tthis.startTime = 0;\r\n\t\tthis.nextTime = 0;\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tinit() {\r\n\t\tthis.startTime = 0;\r\n\t\tthis.nextTime = this.timePan.getValue();\r\n\t}\r\n\r\n\tgetValue(time) {\r\n\t\tthis.startTime += time;\r\n\r\n\t\tif (this.startTime >= this.nextTime) {\r\n\t\t\tthis.startTime = 0;\r\n\t\t\tthis.nextTime = this.timePan.getValue();\r\n\r\n\t\t\tif (this.numPan.b == 1) {\r\n\t\t\t\tif (this.numPan.getValue(false) > 0.5)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn 0;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.numPan.getValue(true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n}","export default class Initialize {\r\n\t\r\n\treset() {\r\n\t}\r\n\r\n\tinit(emitter, particle) {\r\n\t\tif (particle) {\r\n\t\t\tthis.initialize(particle);\r\n\t\t} else {\r\n\t\t\tthis.initialize(emitter);\r\n\t\t}\r\n\t};\r\n\r\n\t///sub class init\r\n\tinitialize(target) {\r\n\t};\r\n}","import Util from '../utils/Util';\r\nimport Initialize from './Initialize';\r\n\r\nexport default class Life extends Initialize {\r\n\r\n\tconstructor(a, b, c) {\r\n\t\tsuper();\r\n\r\n\t\tthis.lifePan = Util.setSpanValue(a, b, c);\r\n\t\tthis.name = 'Life';\r\n\t}\r\n\r\n\tinitialize(target) {\r\n\t\tif (this.lifePan.a == Infinity)\r\n\t\t\ttarget.life = Infinity;\r\n\t\telse\r\n\t\t\ttarget.life = this.lifePan.getValue();\r\n\t}\r\n}\r\n","import Vector2D from '../math/Vector2D';\r\n\r\nexport default class Zone {\r\n\tconstructor() {\r\n\t\tthis.vector = new Vector2D(0, 0);\r\n\t\tthis.random = 0;\r\n\t\tthis.crossType = \"dead\";\r\n\t\tthis.alert = true;\r\n\t}\r\n\r\n\tgetPosition() {\r\n\t}\r\n\r\n\tcrossing(particle) {\r\n\t}\r\n}","import Zone from './Zone';\r\n\r\nexport default class PointZone extends Zone {\r\n\r\n\tconstructor(x, y) {\r\n\t\tsuper();\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tgetPosition() {\r\n\t\tthis.vector.x = this.x;\r\n\t\tthis.vector.y = this.y;\r\n\r\n\t\treturn this.vector;\r\n\t}\r\n\r\n\tcrossing(particle) {\r\n\t\t\r\n\t\tif (this.alert) {\r\n\t\t\talert('Sorry PointZone does not support crossing method');\r\n\t\t\tthis.alert = false;\r\n\t\t}\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport PointZone from '../zone/PointZone';\r\nimport Initialize from './Initialize';\r\n\r\nexport default class Position extends Initialize {\r\n\r\n\tconstructor(zone) {\r\n\t\tsuper();\r\n\t\tthis.zone = Util.initValue(zone, new PointZone());\r\n\r\n\t\tthis.name = 'Position';\r\n\t}\r\n\r\n\treset(zone) {\r\n\t\tthis.zone = Util.initValue(zone, new PointZone());\r\n\t}\r\n\r\n\tinitialize(target) {\r\n\t\tthis.zone.getPosition();\r\n\r\n\t\ttarget.p.x = this.zone.vector.x;\r\n\t\ttarget.p.y = this.zone.vector.y;\r\n\t};\r\n\r\n}\r\n","import Proton from '../core/Proton';\r\nimport Util from '../utils/Util';\r\nimport Polar2D from '../math/Polar2D';\r\nimport MathUtils from '../math/MathUtils';\r\nimport Initialize from './Initialize';\r\n\r\nexport default class Velocity extends Initialize {\r\n\r\n    constructor(rpan, thapan, type) {\r\n        super();\r\n\r\n        this.rPan = Util.setSpanValue(rpan);\r\n        this.thaPan = Util.setSpanValue(thapan);\r\n        this.type = Util.initValue(type, 'vector');\r\n\r\n        this.name = 'Velocity';\r\n    }\r\n\r\n    reset(rpan, thapan, type) {\r\n        this.rPan = Util.setSpanValue(rpan);\r\n        this.thaPan = Util.setSpanValue(thapan);\r\n        this.type = Util.initValue(type, 'vector');\r\n    };\r\n\r\n    normalizeVelocity(vr) {\r\n        return vr * Proton.MEASURE;\r\n    }\r\n\r\n    initialize(target) {\r\n        if (this.type == 'p' || this.type == 'P' || this.type == 'polar') {\r\n            const polar2d = new Polar2D(this.normalizeVelocity(this.rPan.getValue()), this.thaPan.getValue() * MathUtils.PI_180);\r\n\r\n            target.v.x = polar2d.getX();\r\n            target.v.y = polar2d.getY();\r\n        } else {\r\n            target.v.x = this.normalizeVelocity(this.rPan.getValue());\r\n            target.v.y = this.normalizeVelocity(this.thaPan.getValue());\r\n        }\r\n    };\r\n}","import Util from '../utils/Util';\r\nimport Initialize from './Initialize';\r\n\r\nexport default class Mass extends Initialize {\r\n\r\n\tconstructor(a, b, c) {\r\n\t\tsuper();\r\n\t\tthis.massPan = Util.setSpanValue(a, b, c);\r\n\t\tthis.name = 'Mass';\r\n\t}\r\n\r\n\tinitialize(target) {\r\n\t\ttarget.mass = this.massPan.getValue();\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport Initialize from './Initialize';\r\n\r\nexport default class Radius extends Initialize {\r\n\r\n\tconstructor(a, b, c) {\r\n\t\tsuper();\r\n\t\tthis.radius = Util.setSpanValue(a, b, c);\r\n\r\n\t\tthis.name = 'Radius';\r\n\t}\r\n\r\n\treset(a, b, c) {\r\n\t\tthis.radius = Util.setSpanValue(a, b, c);\r\n\t};\r\n\r\n\tinitialize(particle) {\r\n\t\tparticle.radius = this.radius.getValue();\r\n\t\tparticle.transform.oldRadius = particle.radius;\r\n\t};\r\n}","import Util from '../utils/Util';\r\nimport ArraySpan from '../math/ArraySpan';\r\nimport Initialize from './Initialize';\r\n\r\nexport default class Body extends Initialize {\r\n\r\n    constructor(image, w, h) {\r\n        super();\r\n\r\n        this.image = this.setSpanValue(image);\r\n        this.w = Util.initValue(w, 20);\r\n        this.h = Util.initValue(h, this.w);\r\n        this.name = 'Body';\r\n    }\r\n\r\n    initialize(particle) {\r\n        const imagetarget = this.image.getValue();\r\n\r\n        if (typeof(imagetarget) == 'string') {\r\n            particle.body = { width: this.w, height: this.h, src: imagetarget , isInner: true, inner: true };\r\n        } else {\r\n            particle.body = imagetarget;\r\n        }\r\n    };\r\n\r\n    setSpanValue(color) {\r\n        return color instanceof ArraySpan ? color : new ArraySpan(color);\r\n    }\r\n}","import Proton from '../core/Proton';\r\nimport Util from '../utils/Util';\r\nimport ease from '../math/ease';\r\n\r\nexport default class Behaviour {\r\n    static id = 0;\r\n\r\n    /**\r\n     * The Behaviour class is the base for the other Behaviour\r\n     *\r\n     * @memberof! -\r\n     * @interface\r\n     * @alias Proton.Behaviour\r\n     *\r\n     * @param {Number} life \tthe behaviours life\r\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\r\n     *\r\n     * @property {String}  id \t\tThe behaviours id\r\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\r\n     * @property {Number}  energy=1\r\n     * @property {Boolean} dead=false The particle is dead at first\r\n     * @property {Array}   parents \tThe behaviour's parents array\r\n     * @property {String}  name \tThe behaviour name\r\n     */\r\n    constructor(life, easing) {\r\n\r\n        this.life = Util.initValue(life, Infinity);\r\n        this.easing = ease.getEasing(easing);\r\n\r\n        this.age = 0;\r\n        this.energy = 1;\r\n        this.dead = false;\r\n        this.parents = [];\r\n\r\n        this.id = `Behaviour_${Behaviour.id++}`;\r\n        this.name = 'Behaviour';\r\n    }\r\n\r\n    /**\r\n     * Reset this behaviour's parameters\r\n     *\r\n     * @method reset\r\n     * @memberof Proton.Behaviour\r\n     * @instance\r\n     *\r\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\r\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\r\n     */\r\n    reset(life, easing) {\r\n        this.life = Util.initValue(life, Infinity);\r\n        this.easing = ease.getEasing(easing);\r\n    }\r\n\r\n    /**\r\n     * Normalize a force by 1:100;\r\n     *\r\n     * @method normalizeForce\r\n     * @memberof Proton.Behaviour\r\n     * @instance\r\n     *\r\n     * @param {Proton.Vector2D} force \r\n     */\r\n    normalizeForce(force) {\r\n        return force.multiplyScalar(Proton.MEASURE);\r\n    }\r\n\r\n    /**\r\n     * Normalize a value by 1:100;\r\n     *\r\n     * @method normalizeValue\r\n     * @memberof Proton.Behaviour\r\n     * @instance\r\n     *\r\n     * @param {Number} value\r\n     */\r\n    normalizeValue(value) {\r\n        return value * Proton.MEASURE;\r\n    }\r\n\r\n    /**\r\n     * Initialize the behaviour's parameters for all particles\r\n     *\r\n     * @method initialize\r\n     * @memberof Proton.Behaviour\r\n     * @instance\r\n     *\r\n     * @param {Proton.Particle} particle\r\n     */\r\n    initialize(particle) {}\r\n\r\n    /**\r\n     * Apply this behaviour for all particles every time\r\n     *\r\n     * @method applyBehaviour\r\n     * @memberof Proton.Behaviour\r\n     * @instance\r\n     *\r\n     * @param {Proton.Particle} particle\r\n     * @param {Number} \t\t\ttime the integrate time 1/ms\r\n     * @param {Int} \t\t\tindex the particle index\r\n     */\r\n    calculate(particle, time, index) {\r\n        this.age += time;\r\n\r\n        if (this.age >= this.life || this.dead) {\r\n            this.energy = 0;\r\n            this.dead = true;\r\n            this.destroy();\r\n        } else {\r\n            const scale = this.easing(particle.age / particle.life);\r\n            this.energy = Math.max(1 - scale, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destory this behaviour\r\n     *\r\n     * @method destroy\r\n     * @memberof Proton.Behaviour\r\n     * @instance\r\n     */\r\n    destroy() {\r\n        let i = this.parents.length;\r\n        while (i--) {\r\n            this.parents[i].removeBehaviour(this);\r\n        }\r\n\r\n        this.parents.length = 0;\r\n    }\r\n}","import Util from '../utils/Util';\r\nimport Vector2D from '../math/Vector2D';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class Force extends Behaviour {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Proton.Behaviour\r\n\t * @constructor\r\n\t * @alias Proton.Force\r\n\t *\r\n\t * @param {Number} fx\r\n\t * @param {Number} fy\r\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(fx, fy, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\r\n\t\tthis.name = \"Force\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Force\r\n\t * @instance\r\n\t *\r\n\t * @param {Number} fx\r\n\t * @param {Number} fy\r\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(fx, fy, life, easing) {\r\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @method applyBehaviour\r\n\t * @memberof Proton#Proton.Force\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Number} the integrate time 1/ms\r\n\t * @param {Int} the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.calculate(particle, time, index);\r\n\t\tparticle.a.add(this.force);\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport Vector2D from '../math/Vector2D';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class Attraction extends Behaviour {\r\n\r\n\t/**\r\n\t * This behaviour let the particles follow one specific Proton.Vector2D\r\n\t *\r\n\t * @memberof! Proton#\r\n\t * @augments Proton.Behaviour\r\n\t * @constructor\r\n\t * @alias Proton.Attraction\r\n\t *\r\n\t * @todo add description for 'force' and 'radius'\r\n\t *\r\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\r\n\t * @param {Number} [force=100]\r\n\t * @param {Number} [radius=1000]\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {Proton.Vector2D} targetPosition\r\n\t * @property {Number} radius\r\n\t * @property {Number} force\r\n\t * @property {Number} radiusSq\r\n\t * @property {Proton.Vector2D} attractionForce\r\n\t * @property {Number} lengthSq\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(targetPosition, force, radius, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.targetPosition = Util.initValue(targetPosition, new Vector2D);\r\n\t\tthis.radius = Util.initValue(radius, 1000);\r\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\r\n\r\n\t\tthis.radiusSq = this.radius * this.radius\r\n\t\tthis.attractionForce = new Vector2D();\r\n\t\tthis.lengthSq = 0;\r\n\r\n\t\tthis.name = \"Attraction\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Attraction\r\n\t * @instance\r\n\t *\r\n\t * @todo add description for 'force' and 'radius'\r\n\t *\r\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\r\n\t * @param {Number} [force=100]\r\n\t * @param {Number} [radius=1000]\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(targetPosition, force, radius, life, easing) {\r\n\t\tthis.targetPosition = Util.initValue(targetPosition, new Vector2D);\r\n\t\tthis.radius = Util.initValue(radius, 1000);\r\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\r\n\r\n\t\tthis.radiusSq = this.radius * this.radius\r\n\t\tthis.attractionForce = new Vector2D();\r\n\t\tthis.lengthSq = 0;\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @memberof Proton#Proton.Attraction\r\n\t * @method applyBehaviour\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\r\n\t * @param {Int} \t\t\tindex the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.calculate(particle, time, index);\r\n\r\n\t\tthis.attractionForce.copy(this.targetPosition);\r\n\t\tthis.attractionForce.sub(particle.p);\r\n\t\tthis.lengthSq = this.attractionForce.lengthSq();\r\n\r\n\t\tif (this.lengthSq > 0.000004 && this.lengthSq < this.radiusSq) {\r\n\t\t\tthis.attractionForce.normalize();\r\n\t\t\tthis.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\r\n\t\t\tthis.attractionForce.multiplyScalar(this.force);\r\n\r\n\t\t\tparticle.a.add(this.attractionForce);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import Util from '../utils/Util';\r\nimport Vector2D from '../math/Vector2D';\r\nimport MathUtils from '../math/MathUtils';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class RandomDrift extends Behaviour {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Behaviour\r\n\t * @constructor\r\n\t * @alias RandomDrift\r\n\t *\r\n\t * @param {Number} driftX \t\t\t\tX value of the new Vector2D\r\n\t * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\r\n\t * @param {Number} delay \t\t\t\tHow much delay the drift should have\r\n\t * @param {Number} [life=Infinity] \t\tthis behaviour's life\r\n\t * @param {String} [easing=easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {Number} time The time of the drift\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(driftX, driftY, delay, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.reset(driftX, driftY, delay);\r\n\t\tthis.time = 0;\r\n\t\tthis.name = \"RandomDrift\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#RandomDrift\r\n\t * @instance\r\n\t *\r\n\t * @param {Number} driftX \t\t\t\tX value of the new Vector2D\r\n\t * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\r\n\t * @param {Number} delay \t\t\t\tHow much delay the drift should have\r\n\t * @param {Number} [life=Infinity] \t\tthis behaviour's life\r\n\t * @param {String} [easing=easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(driftX, driftY, delay, life, easing) {\r\n\t\tthis.panFoce = new Vector2D(driftX, driftY);\r\n\t\tthis.panFoce = this.normalizeForce(this.panFoce);\r\n\t\tthis.delay = delay;\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @method applyBehaviour\r\n\t * @memberof Proton#RandomDrift\r\n\t * @instance\r\n\t *\r\n\t * @param {Particle} particle\r\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\r\n\t * @param {Int} \t\t\tindex the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.calculate(particle, time, index);\r\n\t\tthis.time += time;\r\n\r\n\t\tif (this.time >= this.delay) {\r\n\t\t\tparticle.a.addXY(MathUtils.randomAToB(-this.panFoce.x, this.panFoce.x), MathUtils.randomAToB(-this.panFoce.y, this.panFoce.y));\r\n\t\t\tthis.time = 0;\r\n\t\t};\r\n\t}\r\n}\r\n","import Util from '../utils/Util';\r\nimport Vector2D from '../math/Vector2D';\r\nimport Force from './Force';\r\n\r\nexport default class Gravity extends Force {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Proton#Proton.Force\r\n\t * @constructor\r\n\t * @alias Proton.Gravity\r\n\t *\r\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(g, life, easing) {\r\n\t\tsuper(0, g, life, easing);\r\n\t\tthis.name = \"Gravity\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Gravity\r\n\t * @instance\r\n\t *\r\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(g, life, easing) {\r\n\t\tsuper.reset(0, g, life, easing);\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport Vector2D from '../math/Vector2D';\r\nimport Behaviour from './Behaviour';\r\n\r\n//can use Collision(emitter,true,function(){}) or Collision();\r\nexport default class Collision extends Behaviour {\r\n\r\n\t/**\r\n\t * The callback after collision\r\n\t *\r\n\t * @callback Callback\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Proton.Paritcle} otherParticle\r\n\t */\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Proton.Behaviour\r\n\t * @constructor\r\n\t * @alias Proton.Collision\r\n\t *\r\n\t * @todo add description to mass\r\n\t *\r\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\r\n\t * @param {Boolean} \t\t[mass=true]\t\t\t\r\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(emitter, mass, callback, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.reset(emitter, mass, callback);\r\n\t\tthis.name = \"Collision\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @memberof Proton#Proton.Collision\r\n\t * @method reset\r\n\t * @instance\r\n\t *\r\n\t * @todo add description to mass\r\n\t *\r\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\r\n\t * @param {Boolean} \t\t[mass=true]\t\t\t\r\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\r\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(emitter, mass, callback, life, easing) {\r\n\t\tthis.emitter = Util.initValue(emitter, null);\r\n\t\tthis.mass = Util.initValue(mass, true);\r\n\t\tthis.callback = Util.initValue(callback, null);\r\n\r\n\t\tthis.collisionPool = [];\r\n\t\tthis.delta = new Vector2D();\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @memberof Proton#Proton.Collision\r\n\t * @method applyBehaviour\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\r\n\t * @param {Int} \t\t\tindex the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\r\n\t\tconst length = newPool.length;\r\n\r\n\t\tlet otherParticle;\r\n\t\tlet lengthSq;\r\n\t\tlet overlap;\r\n\t\tlet totalMass;\r\n\t\tlet averageMass1, averageMass2;\r\n\t\tlet i;\r\n\r\n\t\tfor (i = 0; i < length; i++) {\r\n\t\t\totherParticle = newPool[i];\r\n\r\n\t\t\tif (otherParticle !== particle) {\r\n\t\t\t\tthis.delta.copy(otherParticle.p);\r\n\t\t\t\tthis.delta.sub(particle.p);\r\n\r\n\t\t\t\tlengthSq = this.delta.lengthSq();\r\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\r\n\r\n\t\t\t\tif (lengthSq <= distance * distance) {\r\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\r\n\t\t\t\t\toverlap += 0.5;\r\n\r\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\r\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\r\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\r\n\t\t\t\t\t\r\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\r\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\r\n\r\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import Util from '../utils/Util';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class CrossZone extends Behaviour {\r\n\r\n    /**\r\n     * Defines what happens if the particles come to the end of the specified zone\r\n     *\r\n     * @memberof! Proton#\r\n     * @augments Proton.Behaviour\r\n     * @constructor\r\n     * @alias Proton.CrossZone\r\n     *\r\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\r\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\r\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\r\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\r\n     *\r\n     * @property {String} name The Behaviour name\r\n     */\r\n    constructor(zone, crossType, life, easing) {\r\n        super(life, easing);\r\n\r\n        this.reset(zone, crossType);\r\n        this.name = \"CrossZone\";\r\n    }\r\n\r\n    /**\r\n     * Reset this behaviour's parameters\r\n     *\r\n     * @method reset\r\n     * @memberof Proton#Proton.CrossZone\r\n     * @instance\r\n     *\r\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\r\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\r\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\r\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\r\n     */\r\n    reset(zone, crossType, life, easing) {\r\n        this.zone = zone;\r\n        this.zone.crossType = Util.initValue(crossType, \"dead\");\r\n\r\n        life && super.reset(life, easing);\r\n    }\r\n\r\n    /**\r\n     * Apply this behaviour for all particles every time\r\n     *\r\n     * @method applyBehaviour\r\n     * @memberof Proton#Proton.CrossZone\r\n     * @instance\r\n     *\r\n     * @param {Proton.Particle} particle\r\n     * @param {Number} the integrate time 1/ms\r\n     * @param {Int} the particle index\r\n     */\r\n    applyBehaviour(particle, time, index) {\r\n        this.calculate(particle, time, index);\r\n        this.zone.crossing(particle);\r\n    };\r\n}","import Util from '../utils/Util';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class Alpha extends Behaviour {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Proton.Behaviour\r\n\t * @constructor\r\n\t * @alias Proton.Alpha\r\n\t *\r\n\t * @todo add description for 'a' and 'b'\r\n\t *\r\n\t * @param {Number} a\r\n\t * @param {String} b\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(a, b, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.reset(a, b);\r\n\t\tthis.name = \"Alpha\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Alpha\r\n\t * @instance\r\n\t *\r\n\t * @todo add description for 'a' and 'b'\r\n\t *\r\n\t * @param {Number} a\r\n\t * @param {String} b\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(a, b, life, easing) {\r\n\t\tthis.same = b === null || b === undefined ? true : false;\r\n\t\tthis.a = Util.setSpanValue(Util.initValue(a, 1));\r\n\t\tthis.b = Util.setSpanValue(b);\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the new alpha value of the particle\r\n\t *\r\n\t * @method initialize\r\n\t * @memberof Proton#Proton.Alpha\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle A single Proton generated particle\r\n\t */\r\n\tinitialize(particle) {\r\n\t\tparticle.transform.alphaA = this.a.getValue();\r\n\r\n\t\tif (this.same)\r\n\t\t\tparticle.transform.alphaB = particle.transform.alphaA;\r\n\t\telse\r\n\t\t\tparticle.transform.alphaB = this.b.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * @method applyBehaviour\r\n\t * @memberof Proton#Proton.Alpha\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\r\n\t * @param {Int} \t\t\tindex the particle index\r\n \t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.calculate(particle, time, index);\r\n\t\t\r\n\t\tparticle.alpha = particle.transform.alphaB + (particle.transform.alphaA - particle.transform.alphaB) * this.energy;\r\n\t\tif (particle.alpha < 0.001) particle.alpha = 0;\r\n\t}\r\n}\r\n","import Util from '../utils/Util';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class Scale extends Behaviour {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Proton.Behaviour\r\n\t * @constructor\r\n\t * @alias Proton.Scale\r\n\t *\r\n\t * @todo add description for 'a' and 'b'\r\n\t *\r\n\t * @param {Number} a\r\n\t * @param {String} b\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(a, b, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.reset(a, b);\r\n\t\tthis.name = \"Scale\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Scale\r\n\t * @instance\r\n\t *\r\n\t * @param {Number} a\r\n\t * @param {String} b\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(a, b, life, easing) {\r\n\t\tthis.same = b === null || b === undefined ? true : false;\r\n\t\tthis.a = Util.setSpanValue(Util.initValue(a, 1));\r\n\t\tthis.b = Util.setSpanValue(b);\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the behaviour's parameters for all particles\r\n\t *\r\n\t * @method initialize\r\n\t * @memberof Proton#Proton.Scale\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t */\r\n\tinitialize(particle) {\r\n\t\tparticle.transform.scaleA = this.a.getValue();\r\n\t\tparticle.transform.oldRadius = particle.radius;\r\n\t\tparticle.transform.scaleB = this.same ? particle.transform.scaleA : this.b.getValue();\r\n\t};\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @method applyBehaviour\r\n\t * @memberof Proton#Proton.Scale\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\r\n\t * @param {Int} \t\t\tindex the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.calculate(particle, time, index);\r\n\t\tparticle.scale = particle.transform.scaleB + (particle.transform.scaleA - particle.transform.scaleB) * this.energy;\r\n\r\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\r\n\t\tparticle.radius = particle.transform.oldRadius * particle.scale;\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class Rotate extends Behaviour {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Proton.Behaviour\r\n\t * @constructor\r\n\t * @alias Proton.Rotate\r\n\t *\r\n\t * @todo add description for 'a', 'b' and 'style'\r\n\t *\r\n\t * @param {String} [influence=Velocity] The rotation's influence\r\n\t * @param {String} b\r\n\t * @param {String} [style=to]\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(influence, b, style, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.reset(influence, b, style);\r\n\t\tthis.name = \"Rotate\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Rotate\r\n\t * @instance\r\n\t *\r\n\t * @todo add description for 'a', 'b' and 'style'\r\n\t *\r\n\t * @param {String} a \r\n\t * @param {String} b\r\n\t * @param {String} [style=to]\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(a, b, style, life, easing) {\r\n\t\tthis.same = b === null || b === undefined ? true : false;\r\n\r\n\t\tthis.a = Util.setSpanValue(Util.initValue(a, \"Velocity\"));\r\n\t\tthis.b = Util.setSpanValue(Util.initValue(b, 0));\r\n\t\tthis.style = Util.initValue(style, 'to');\r\n\r\n\t\tlife && super.reset(life, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the behaviour's parameters for all particles\r\n\t *\r\n\t * @method initialize\r\n\t * @memberof Proton#Proton.Rotate\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t */\r\n\tinitialize(particle) {\r\n\t\tparticle.rotation = this.a.getValue();\r\n\t\tparticle.transform.rotationA = this.a.getValue();\r\n\r\n\t\tif (!this.same) particle.transform.rotationB = this.b.getValue();\r\n\t};\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @method applyBehaviour\r\n\t * @memberof Proton#Proton.Rotate\r\n\t * @instance\r\n\t *\r\n\t * @param {Proton.Particle} particle\r\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\r\n\t * @param {Int} \t\t\tindex the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.calculate(particle, time, index);\r\n\r\n\t\tif (!this.same) {\r\n\t\t\tif (this.style == 'to' || this.style == 'TO' || this.style == '_') {\r\n\t\t\t\tparticle.rotation += particle.transform.rotationB + (particle.transform.rotationA - particle.transform.rotationB) * this.energy\r\n\t\t\t} else {\r\n\t\t\t\tparticle.rotation += particle.transform.rotationB;\r\n\t\t\t}\r\n\t\t} else if (this.a.a == \"V\" || this.a.a == \"Velocity\" || this.a.a == \"v\") {\r\n\t\t\t//beta...\r\n\t\t\tparticle.rotation = particle.getDirection();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","import Util from '../utils/Util';\r\nimport ColorUtil from '../utils/ColorUtil';\r\nimport ArraySpan from '../math/ArraySpan';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class Color extends Behaviour {\r\n\r\n    /**\r\n     * @memberof! Proton#\r\n     * @augments Proton.Behaviour\r\n     * @constructor\r\n     * @alias Proton.Color\r\n     *\r\n     * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\r\n     * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\r\n     * @param {Number} [life=Infinity] \tthis behaviour's life\r\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\r\n     *\r\n     * @property {String} name The Behaviour name\r\n     */\r\n    constructor(a, b, life, easing) {\r\n        super(life, easing);\r\n\r\n        this.reset(a, b);\r\n        this.name = \"Color\";\r\n    }\r\n\r\n    /**\r\n     * Reset this behaviour's parameters\r\n     *\r\n     * @method reset\r\n     * @memberof Proton#Proton.Color\r\n     * @instance\r\n     *\r\n     * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\r\n     * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\r\n     * @param {Number} [life=Infinity] \tthis behaviour's life\r\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\r\n     */\r\n    reset(a, b, life, easing) {\r\n        this.a = ArraySpan.createArraySpan(a);\r\n        this.b = ArraySpan.createArraySpan(b);\r\n\r\n        life && super.reset(life, easing);\r\n    }\r\n\r\n    /**\r\n     * Initialize the behaviour's parameters for all particles\r\n     *\r\n     * @method initialize\r\n     * @memberof Proton#Proton.Color\r\n     * @instance\r\n     *\r\n     * @param {Proton.Particle} particle\r\n     */\r\n    initialize(particle) {\r\n        particle.color = this.a.getValue();\r\n        particle.transform.colorA = ColorUtil.hexToRGB(particle.color);\r\n\r\n        if (this.b)\r\n            particle.transform.colorB = ColorUtil.hexToRGB(this.b.getValue());\r\n    };\r\n\r\n    /**\r\n     * Apply this behaviour for all particles every time\r\n     *\r\n     * @method applyBehaviour\r\n     * @memberof Proton#Proton.Color\r\n     * @instance\r\n     *\r\n     * @param {Proton.Particle} particle\r\n     * @param {Number} the integrate time 1/ms\r\n     * @param {Int} the particle index\r\n     */\r\n    applyBehaviour(particle, time, index) {\r\n        if (this.b) {\r\n            this.calculate(particle, time, index);\r\n\r\n            particle.transform.rgb.r = particle.transform.colorB.r + (particle.transform.colorA.r - particle.transform.colorB.r) * this.energy;\r\n            particle.transform.rgb.g = particle.transform.colorB.g + (particle.transform.colorA.g - particle.transform.colorB.g) * this.energy;\r\n            particle.transform.rgb.b = particle.transform.colorB.b + (particle.transform.colorA.b - particle.transform.colorB.b) * this.energy;\r\n\r\n            particle.transform.rgb.r = Math.floor(particle.transform.rgb.r);\r\n            particle.transform.rgb.g = Math.floor(particle.transform.rgb.g);\r\n            particle.transform.rgb.b = Math.floor(particle.transform.rgb.b);\r\n\r\n        } else {\r\n            particle.transform.rgb.r = particle.transform.colorA.r;\r\n            particle.transform.rgb.g = particle.transform.colorA.g;\r\n            particle.transform.rgb.b = particle.transform.colorA.b;\r\n        }\r\n    };\r\n\r\n}","import Util from '../utils/Util';\r\nimport Attraction from './Attraction';\r\n\r\nexport default class Repulsion extends Attraction {\r\n\r\n\t/**\r\n\t * The oppisite of Proton.Attraction - turns the force\r\n\t *\r\n\t * @memberof! Proton#\r\n\t * @augments Proton#Proton.Attraction\r\n\t * @constructor\r\n\t * @alias Proton.Repulsion\r\n\t *\r\n\t * @todo add description for 'force' and 'radius'\r\n\t *\r\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\r\n\t * @param {Number} [force=100]\r\n\t * @param {Number} [radius=1000]\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t *\r\n\t * @property {Number} force\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(targetPosition, force, radius, life, easing) {\r\n\t\tsuper(targetPosition, force, radius, life, easing);\r\n\r\n\t\tthis.force *= -1;\r\n\t\tthis.name = \"Repulsion\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#Proton.Repulsion\r\n\t * @instance\r\n\t *\r\n\t * @todo add description for 'force' and 'radius'\r\n\t *\r\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\r\n\t * @param {Number} [force=100]\r\n\t * @param {Number} [radius=1000]\r\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\r\n\t */\r\n\treset(targetPosition, force, radius, life, easing) {\r\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\r\n\t\tthis.force *= -1;\r\n\t}\r\n}\r\n","import Util from '../utils/Util';\r\nimport Vector2D from '../math/Vector2D';\r\nimport Behaviour from './Behaviour';\r\n\r\nexport default class GravityWell extends Behaviour {\r\n\r\n\t/**\r\n\t * @memberof! Proton#\r\n\t * @augments Behaviour\r\n\t * @constructor\r\n\t * @alias GravityWell\r\n\t *\r\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\r\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\t\r\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\r\n\t *\r\n\t * @property {String} name The Behaviour name\r\n\t */\r\n\tconstructor(centerPoint, force, life, easing) {\r\n\t\tsuper(life, easing);\r\n\r\n\t\tthis.distanceVec = new Vector2D();\r\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\r\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\r\n\r\n\t\tthis.name = \"GravityWell\";\r\n\t}\r\n\r\n\t/**\r\n\t * Reset this behaviour's parameters\r\n\t *\r\n\t * @method reset\r\n\t * @memberof Proton#GravityWell\r\n\t * @instance\r\n\t *\r\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\r\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\t\r\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\r\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\r\n\t */\r\n\treset(centerPoint, force, life, easing) {\r\n\t\tthis.distanceVec = new Vector2D();\r\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\r\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\r\n\t\t\r\n\t\tlife && super.reset(life, easing);\r\n\t};\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinitialize(particle) {\r\n\t};\r\n\r\n\t/**\r\n\t * Apply this behaviour for all particles every time\r\n\t *\r\n\t * @method applyBehaviour\r\n\t * @memberof Proton#GravityWell\r\n\t * @instance\r\n\t *\r\n\t * @param {Particle} particle\r\n\t * @param {Number} the integrate time 1/ms\r\n\t * @param {Int} the particle index\r\n\t */\r\n\tapplyBehaviour(particle, time, index) {\r\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\r\n\t\tconst distanceSq = this.distanceVec.lengthSq();\r\n\r\n\t\tif (distanceSq != 0) {\r\n\t\t\tconst distance = this.distanceVec.length();\r\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\r\n\r\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\r\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\r\n\t\t}\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport Initialize from './Initialize';\r\nimport MathUtils from '../math/MathUtils';\r\n\r\nexport default {\r\n\r\n\tinitialize(emitter, particle, initializes) {\r\n\t\tconst length = initializes.length;\r\n\t\tlet i;\r\n\r\n\t\tfor (i = 0; i < length; i++) {\r\n\t\t\tif (initializes[i] instanceof Initialize)\r\n\t\t\t\tinitializes[i].init(emitter, particle);\r\n\t\t\telse\r\n\t\t\t\tthis.init(emitter, particle, initializes[i]);\r\n\t\t}\r\n\r\n\t\tthis.bindEmitter(emitter, particle);\r\n\t},\r\n\r\n\t//////////////////////init//////////////////////\r\n\tinit(emitter, particle, initialize) {\r\n\t\tUtil.setPrototypeByObject(particle, initialize);\r\n\t\tUtil.setVector2DByObject(particle, initialize);\r\n\t},\r\n\t\r\n\tbindEmitter(emitter, particle) {\r\n\t\tif (emitter.bindEmitter) {\r\n\t\t\tparticle.p.add(emitter.p);\r\n\t\t\tparticle.v.add(emitter.v);\r\n\t\t\tparticle.a.add(emitter.a);\r\n\r\n\t\t\tparticle.v.rotate(MathUtils.degreeTransform(emitter.rotation));\r\n\t\t}\r\n\t}\r\n}\r\n","import Util from '../utils/Util';\r\nimport Particle from '../core/Particle';\r\nimport EventDispatcher from '../events/EventDispatcher';\r\n\r\nimport Rate from '../initialize/Rate';\r\nimport InitializeUtil from '../initialize/InitializeUtil';\r\n\r\nexport default class Emitter extends Particle {\r\n\r\n\tstatic ID = 0;\r\n\r\n\t/**\r\n\t * You can use this emit particles.\r\n\t *\r\n\t * It will dispatch follow events:\r\n\t * PARTICLE_CREATED\r\n\t * PARTICLE_UPDATA\r\n\t * PARTICLE_DEAD\r\n\t *\r\n\t * @class Emitter\r\n\t * @constructor\r\n\t * @param {Object} pObj the parameters object;\r\n\t * for example {damping:0.01,bindEmitter:false}\r\n\t */\r\n\tconstructor(pObj) {\r\n\t\tsuper(pObj);\r\n\r\n\t\tthis.initializes = [];\r\n\t\tthis.particles = [];\r\n\t\tthis.behaviours = [];\r\n\r\n\t\tthis.emitSpeed = 0;\r\n\t\tthis.emitTime = 0;\r\n\t\tthis.totalTime = -1;\r\n\r\n\t\t/**\r\n\t\t * The friction coefficient for all particle emit by This;\r\n\t\t * @property damping\r\n\t\t * @type {Number}\r\n\t\t * @default 0.006\r\n\t\t */\r\n\t\tthis.damping = .006;\r\n\r\n\t\t/**\r\n\t\t * If bindEmitter the particles can bind this emitter's property;\r\n\t\t * @property bindEmitter\r\n\t\t * @type {Boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.bindEmitter = true;\r\n\r\n\t\t/**\r\n\t\t * The number of particles per second emit (a [particle]/b [s]);\r\n\t\t * @property rate\r\n\t\t * @type {Rate}\r\n\t\t * @default Rate(1, .1)\r\n\t\t */\r\n\t\tthis.rate = new Rate(1, .1);\r\n\r\n\t\tthis.id = `emitter_${Emitter.ID++}`;\r\n\t\tthis.name = 'Emitter';\r\n\t}\r\n\r\n\t/**\r\n\t * start emit particle\r\n\t * @method emit\r\n\t * @param {Number} emitTime begin emit time;\r\n\t * @param {String} life the life of this emitter\r\n\t */\r\n\temit(totalTime, life) {\r\n\t\tthis.stoped = false;\r\n\t\tthis.emitTime = 0;\r\n\t\tthis.totalTime = Util.initValue(totalTime, Infinity);\r\n\r\n\t\tif (life == true || life == 'life' || life == 'destroy') {\r\n\t\t\tthis.life = totalTime == 'once' ? 1 : this.totalTime;\r\n\t\t} else if (!isNaN(life)) {\r\n\t\t\tthis.life = life;\r\n\t\t}\r\n\r\n\t\tthis.rate.init();\r\n\t}\r\n\r\n\t/**\r\n\t * stop emiting\r\n\t * @method stop\r\n\t */\r\n\tstop() {\r\n\t\tthis.totalTime = -1;\r\n\t\tthis.emitTime = 0;\r\n\t\tthis.stoped = true;\r\n\t}\r\n\r\n\tpreEmit(time) {\r\n\t\tlet oldStoped = this.stoped;\r\n\t\tlet oldEmitTime = this.emitTime;\r\n\t\tlet oldTotalTime = this.totalTime;\r\n\r\n\t\tthis.stoped = false;\r\n\t\tthis.emitTime = 0;\r\n\t\tthis.totalTime = time;\r\n\t\tthis.rate.init();\r\n\r\n\t\tconst step = 0.0167;\r\n\t\twhile (time > step) {\r\n\t\t\ttime -= step;\r\n\t\t\tthis.update(step);\r\n\t\t}\r\n\r\n\t\tthis.stoped = oldStoped;\r\n\t\tthis.emitTime = oldEmitTime + Math.max(time, 0);\r\n\t\tthis.totalTime = oldTotalTime;\r\n\t}\r\n\r\n\t/**\r\n\t * remove current all particles\r\n\t * @method removeAllParticles\r\n\t */\r\n\tremoveAllParticles() {\r\n\t\tlet i = this.particles.length;\r\n\t\twhile (i--) this.particles[i].dead = true;\r\n\t}\r\n\r\n\t/**\r\n\t * add initialize to this emitter\r\n\t * @method addSelfInitialize\r\n\t */\r\n\taddSelfInitialize(pObj) {\r\n\t\tif (pObj['init']) {\r\n\t\t\tpObj.init(this);\r\n\t\t} else {\r\n\t\t\tthis.initAll();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * add the Initialize to particles;\r\n\t * \r\n\t * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\r\n\t * @method addInitialize\r\n\t * @param {Initialize} initialize like this new Radius(1, 12)\r\n\t */\r\n\taddInitialize(...rest) {\r\n\t\tlet i = rest.length;\r\n\t\twhile (i--)\r\n\t\t\tthis.initializes.push(rest[i]);\r\n\t}\r\n\r\n\t/**\r\n\t * remove the Initialize\r\n\t * @method removeInitialize\r\n\t * @param {Initialize} initialize a initialize\r\n\t */\r\n\tremoveInitialize(initializer) {\r\n\t\tconst index = this.initializes.indexOf(initializer);\r\n\t\tif (index > -1) this.initializes.splice(index, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * remove all Initializes\r\n\t * @method removeInitializers\r\n\t */\r\n\tremoveAllInitializers() {\r\n\t\tUtil.destroyArray(this.initializes);\r\n\t}\r\n\r\n\t/**\r\n\t * add the Behaviour to particles;\r\n\t * \r\n\t * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\r\n\t * @method addBehaviour\r\n\t * @param {Behaviour} behaviour like this new Color('random')\r\n\t */\r\n\taddBehaviour(...rest) {\r\n\t\tlet i = arguments.length;\r\n\t\twhile (i--) {\r\n\t\t\tlet behaviour = rest[i];\r\n\t\t\tthis.behaviours.push(behaviour);\r\n\t\t\tif (behaviour.parents) behaviour.parents.push(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * remove the Behaviour\r\n\t * @method removeBehaviour\r\n\t * @param {Behaviour} behaviour a behaviour\r\n\t */\r\n\tremoveBehaviour(behaviour) {\r\n\t\tlet index = this.behaviours.indexOf(behaviour);\r\n\t\tthis.behaviours.splice(index, 1);\r\n\r\n\t\tif (behaviour.parents) {\r\n\t\t\tindex = behaviour.parents.indexOf(behaviour);\r\n\t\t\tbehaviour.parents.splice(index, 1);\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * remove all behaviours\r\n\t * @method removeAllBehaviours\r\n\t */\r\n\tremoveAllBehaviours() {\r\n\t\tUtil.destroyArray(this.behaviours);\r\n\t}\r\n\r\n\t// emitter update \r\n\tupdate(time) {\r\n\t\tthis.age += time;\r\n\t\tif (this.age >= this.life || this.dead) this.destroy();\r\n\r\n\t\tthis.emitting(time);\r\n\t\tthis.integrate(time);\r\n\t}\r\n\r\n\tintegrate(time) {\r\n\t\tif (!this.parent) return;\r\n\r\n\t\tconst damping = 1 - this.damping;\r\n\t\tthis.parent.integrator.calculate(this, time, damping);\r\n\r\n\t\tconst length = this.particles.length;\r\n\t\tlet i, particle;\r\n\r\n\t\tfor (i = length - 1; i >= 0; i--) {\r\n\t\t\tparticle = this.particles[i];\r\n\r\n\t\t\t// particle update\r\n\t\t\tparticle.update(time, i);\r\n\t\t\tthis.parent.integrator.calculate(particle, time, damping);\r\n\t\t\tthis.dispatch(\"PARTICLE_UPDATE\", particle);\r\n\r\n\t\t\t// check dead\r\n\t\t\tif (particle.dead) {\r\n\t\t\t\tthis.dispatch(\"PARTICLE_DEAD\", particle);\r\n\r\n\t\t\t\tthis.parent.pool.expire(particle);\r\n\t\t\t\tthis.particles.splice(i, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdispatch(event, target) {\r\n\t\tthis.parent && this.parent.dispatchEvent(event, target);\r\n\t\tthis.bindEvent && this.dispatchEvent(event, target);\r\n\t}\r\n\r\n\temitting(time) {\r\n\t\tif (this.totalTime == 'once') {\r\n\t\t\tlet i;\r\n\t\t\tconst length = this.rate.getValue(99999);\r\n\r\n\t\t\tif (length > 0) this.emitSpeed = length;\r\n\t\t\tfor (i = 0; i < length; i++) this.createParticle();\r\n\t\t\tthis.totalTime = 'none';\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\tthis.emitTime += time;\r\n\r\n\t\t\tif (this.emitTime < this.totalTime) {\r\n\t\t\t\tconst length = this.rate.getValue(time)\r\n\t\t\t\tlet i;\r\n\r\n\t\t\t\tif (length > 0) this.emitSpeed = length;\r\n\t\t\t\tfor (i = 0; i < length; i++) this.createParticle();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * create single particle;\r\n\t * \r\n\t * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\r\n\t * @method removeAllParticles\r\n\t */\r\n\tcreateParticle(initialize, behaviour) {\r\n\t\tconst particle = this.parent.pool.get(Particle);\r\n\t\tthis.setupParticle(particle, initialize, behaviour);\r\n\t\tthis.dispatch(\"PARTICLE_CREATED\", particle);\r\n\r\n\t\treturn particle;\r\n\t}\r\n\r\n\tsetupParticle(particle, initialize, behaviour) {\r\n\t\tlet initializes = this.initializes;\r\n\t\tlet behaviours = this.behaviours;\r\n\r\n\t\tif (initialize) {\r\n\t\t\tinitializes = Util.isArray(initialize) ? initialize : [initialize];\r\n\t\t}\r\n\r\n\t\tif (behaviour) {\r\n\t\t\tbehaviour = Util.isArray(behaviour) ? behaviour : [behaviour];\r\n\t\t}\r\n\r\n\t\tparticle.reset();\r\n\t\tInitializeUtil.initialize(this, particle, initializes);\r\n\t\tparticle.addBehaviours(behaviours);\r\n\t\tparticle.parent = this;\r\n\r\n\t\tthis.particles.push(particle);\r\n\t}\r\n\r\n\tremove() {\r\n\t\tthis.stop();\r\n\t\tUtil.destroy(this.particles);\r\n\t}\r\n\r\n\t/**\r\n\t * Destory this Emitter\r\n\t * @method destroy\r\n\t */\r\n\tdestroy(slow) {\r\n\t\tthis.dead = true;\r\n\t\tthis.remove();\r\n\t\tthis.removeAllInitializers();\r\n\t\tthis.removeAllBehaviours();\r\n\t\tthis.parent && this.parent.removeEmitter(this);\r\n\t}\r\n\r\n}\r\n\r\nEventDispatcher.bind(Emitter);","import Util from '../utils/Util';\r\nimport Emitter from './Emitter';\r\n\r\nexport default class BehaviourEmitter extends Emitter {\r\n\r\n\t/**\r\n\t * The BehaviourEmitter class inherits from Proton.Emitter\r\n\t *\r\n\t * use the BehaviourEmitter you can add behaviours to self;\r\n\t * @class Proton.BehaviourEmitter\r\n\t * @constructor\r\n\t * @param {Object} pObj the parameters object;\r\n\t */\r\n\tconstructor(pObj) {\r\n\t\tsuper(pObj);\r\n\r\n\t\tthis.selfBehaviours = [];\r\n\t};\r\n\t\r\n\t/**\r\n\t * add the Behaviour to emitter;\r\n\t *\r\n\t * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\r\n\t * @method addSelfBehaviour\r\n\t * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\r\n\t */\r\n\taddSelfBehaviour(...rest) {\r\n\t\tconst length = rest.length;\r\n\t\tlet i;\r\n\r\n\t\tfor (i = 0; i < length; i++) {\r\n\t\t\tthis.selfBehaviours.push(rest[i]);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * remove the Behaviour for self\r\n\t * @method removeSelfBehaviour\r\n\t * @param {Proton.Behaviour} behaviour a behaviour\r\n\t */\r\n\tremoveSelfBehaviour(behaviour) {\r\n\t\tconst index = this.selfBehaviours.indexOf(behaviour);\r\n\t\tif (index > -1) this.selfBehaviours.splice(index, 1);\r\n\t};\r\n\r\n\tupdate(time) {\r\n\t\tsuper.update(time);\r\n\r\n\t\tif (!this.sleep) {\r\n\t\t\tconst length = this.selfBehaviours.length;\r\n\t\t\tlet i;\r\n\r\n\t\t\tfor (i = 0; i < length; i++) {\r\n\t\t\t\tthis.selfBehaviours[i].applyBehaviour(this, time, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport Emitter from './Emitter';\r\n\r\nexport default class FollowEmitter extends Emitter {\r\n\r\n\t/**\r\n\t * The FollowEmitter class inherits from Proton.Emitter\r\n\t *\r\n\t * use the FollowEmitter will emit particle when mousemoving\r\n\t *\r\n\t * @class Proton.FollowEmitter\r\n\t * @constructor\r\n\t * @param {Element} mouseTarget mouseevent's target;\r\n\t * @param {Number} ease the easing of following speed;\r\n\t * @default 0.7\r\n\t * @param {Object} pObj the parameters object;\r\n\t */\r\n\tconstructor(mouseTarget, ease, pObj) {\r\n\t\tsuper(pObj);\r\n\r\n\t\tthis.mouseTarget = Util.initValue(mouseTarget, window);\r\n\t\tthis.ease = Util.initValue(ease, .7);\r\n\r\n\t\tthis._allowEmitting = false;\r\n\t\tthis.initEventHandler();\r\n\t};\r\n\r\n\tinitEventHandler() {\r\n\t\tthis.mousemoveHandler = e => this.mousemove.call(this, e);\r\n\t\tthis.mousedownHandler = e => this.mousedown.call(this, e);\r\n\t\tthis.mouseupHandler = e => this.mouseup.call(this, e);\r\n\r\n\t\tthis.mouseTarget.addEventListener('mousemove', this.mousemoveHandler, false);\r\n\t}\r\n\r\n\t/**\r\n\t * start emit particle\r\n\t * @method emit\r\n\t */\r\n\temit() {\r\n\t\tthis._allowEmitting = true;\r\n\t}\r\n\r\n\t/**\r\n\t * stop emiting\r\n\t * @method stop\r\n\t */\r\n\tstop() {\r\n\t\tthis._allowEmitting = false;\r\n\t}\r\n\r\n\tmousemove(e) {\r\n\t\tif (e.layerX || e.layerX === 0) {\r\n\t\t\tthis.p.x += (e.layerX - this.p.x) * this.ease;\r\n\t\t\tthis.p.y += (e.layerY - this.p.y) * this.ease;\r\n\t\t} else if (e.offsetX || e.offsetX === 0) {\r\n\t\t\tthis.p.x += (e.offsetX - this.p.x) * this.ease;\r\n\t\t\tthis.p.y += (e.offsetY - this.p.y) * this.ease;\r\n\t\t}\r\n\r\n\t\tif (this._allowEmitting) super.emit('once');\r\n\t};\r\n\r\n\t/**\r\n\t * Destory this Emitter\r\n\t * @method destroy\r\n\t */\r\n\tdestroy() {\r\n\t\tsuper.destroy();\r\n\t\tthis.mouseTarget.removeEventListener('mousemove', this.mousemoveHandler, false);\r\n\t}\r\n\r\n}\r\n","import Pool from '../core/Pool';\r\nimport Util from '../utils/Util';\r\n\r\nexport default class BaseRenderer {\r\n\r\n    constructor(element, stroke) {\r\n        this.element = element;\r\n        this.stroke = stroke;\r\n\r\n        this.initHandler();\r\n\r\n        this.circleConf = { isCircle: true };\r\n        this.pool = new Pool();\r\n        this.name = 'BaseRenderer';\r\n    }\r\n\r\n    setStroke(color, thinkness) {\r\n        color = Util.initValue(color, '#000000');\r\n        thinkness = Util.initValue(thinkness, 1);\r\n\r\n        this.stroke = { color, thinkness };\r\n    }\r\n\r\n    initHandler() {\r\n        this._protonUpdateHandler = () => { this.onProtonUpdate.call(this) };\r\n        this._protonUpdateAfterHandler = () => { this.onProtonUpdateAfter.call(this) };\r\n        this._emitterAddedHandler = (emitter) => { this.onEmitterAdded.call(this, emitter) };\r\n        this._emitterRemovedHandler = (emitter) => { this.onEmitterRemoved.call(this, emitter) };\r\n        this._particleCreatedHandler = (particle) => { this.onParticleCreated.call(this, particle) };\r\n        this._particleUpdateHandler = (particle) => { this.onParticleUpdate.call(this, particle) };\r\n        this._particleDeadHandler = (particle) => { this.onParticleDead.call(this, particle) };\r\n    }\r\n\r\n    init(proton) {\r\n        this.parent = proton;\r\n\r\n        proton.addEventListener('PROTON_UPDATE', this._protonUpdateHandler);\r\n        proton.addEventListener('PROTON_UPDATE_AFTER', this._protonUpdateAfterHandler);\r\n\r\n        proton.addEventListener('EMITTER_ADDED', this._emitterAddedHandler);\r\n        proton.addEventListener('EMITTER_REMOVED', this._emitterRemovedHandler);\r\n\r\n        proton.addEventListener('PARTICLE_CREATED', this._particleCreatedHandler);\r\n        proton.addEventListener('PARTICLE_UPDATE', this._particleUpdateHandler);\r\n        proton.addEventListener('PARTICLE_DEAD', this._particleDeadHandler);\r\n    }\r\n\r\n    resize(width, height) {}\r\n\r\n    remove(proton) {\r\n        this.parent.removeEventListener('PROTON_UPDATE', this._protonUpdateHandler);\r\n        this.parent.removeEventListener('PROTON_UPDATE_AFTER', this._protonUpdateAfterHandler);\r\n\r\n        this.parent.removeEventListener('EMITTER_ADDED', this._emitterAddedHandler);\r\n        this.parent.removeEventListener('EMITTER_REMOVED', this._emitterRemovedHandler);\r\n\r\n        this.parent.removeEventListener('PARTICLE_CREATED', this._particleCreatedHandler);\r\n        this.parent.removeEventListener('PARTICLE_UPDATE', this._particleUpdateHandler);\r\n        this.parent.removeEventListener('PARTICLE_DEAD', this._particleDeadHandler);\r\n\r\n        this.parent = null;\r\n    }\r\n\r\n    destroy(){\r\n        this.remove();\r\n    }\r\n    \r\n    onProtonUpdate() {}\r\n    onProtonUpdateAfter() {}\r\n\r\n    onEmitterAdded(emitter) {}\r\n    onEmitterRemoved(emitter) {}\r\n\r\n    onParticleCreated(particle) {}\r\n    onParticleUpdate(particle) {}\r\n    onParticleDead(particle) {}\r\n}","import Util from '../utils/Util';\r\nimport ImgUtil from '../utils/ImgUtil';\r\nimport ColorUtil from '../utils/ColorUtil';\r\nimport MathUtils from '../math/MathUtils';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nexport default class CanvasRenderer extends BaseRenderer {\r\n\r\n    constructor(element) {\r\n        super(element);\r\n\r\n        this.stroke = null;\r\n        this.context = this.element.getContext(\"2d\");\r\n        this.bufferCache = {};\r\n\r\n        this.name = 'CanvasRenderer';\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.element.width = width;\r\n        this.element.height = height;\r\n    }\r\n\r\n    onProtonUpdate() {\r\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\r\n    }\r\n\r\n    onParticleCreated(particle) {\r\n        if (particle.body)\r\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\r\n        else\r\n            particle.color = particle.color || '#ff0000';\r\n    }\r\n\r\n    onParticleUpdate(particle) {\r\n        if (particle.body) {\r\n            if (particle.body instanceof Image) this.drawImage(particle);\r\n        } else {\r\n            this.drawCircle(particle);\r\n        }\r\n    }\r\n\r\n    onParticleDead(particle) {\r\n        particle.body = null;\r\n    }\r\n\r\n\r\n    // private \r\n    addImg2Body(img, particle) {\r\n        particle.body = img;\r\n    }\r\n\r\n    // private drawCircle --\r\n    drawImage(particle) {\r\n        const w = particle.body.width * particle.scale | 0;\r\n        const h = particle.body.height * particle.scale | 0;\r\n        const x = particle.p.x - w / 2;\r\n        const y = particle.p.y - h / 2;\r\n\r\n        if (!!particle.color) {\r\n            if (!particle.transform[\"buffer\"]) particle.transform.buffer = this.createBuffer(particle.body);\r\n\r\n            const bufferContext = particle.transform.buffer.getContext('2d');\r\n            bufferContext.clearRect(0, 0, particle.transform.buffer.width, particle.transform.buffer.height);\r\n            bufferContext.globalAlpha = particle.alpha;\r\n            bufferContext.drawImage(particle.body, 0, 0);\r\n\r\n            bufferContext.globalCompositeOperation = \"source-atop\";\r\n            bufferContext.fillStyle = ColorUtil.rgbToHex(particle.transform.rgb);\r\n            bufferContext.fillRect(0, 0, particle.transform.buffer.width, particle.transform.buffer.height);\r\n            bufferContext.globalCompositeOperation = \"source-over\";\r\n            bufferContext.globalAlpha = 1;\r\n\r\n            this.context.drawImage(particle.transform.buffer, 0, 0, particle.transform.buffer.width, particle.transform.buffer.height, x, y, w, h);\r\n        } else {\r\n            this.context.save();\r\n\r\n            this.context.globalAlpha = particle.alpha;\r\n            this.context.translate(particle.p.x, particle.p.y);\r\n            this.context.rotate(MathUtils.degreeTransform(particle.rotation));\r\n            this.context.translate(-particle.p.x, -particle.p.y);\r\n            this.context.drawImage(particle.body, 0, 0, particle.body.width, particle.body.height, x, y, w, h);\r\n\r\n            this.context.globalAlpha = 1;\r\n            this.context.restore();\r\n        }\r\n    }\r\n\r\n    // private drawCircle --\r\n    drawCircle(particle) {\r\n        if (particle.transform[\"rgb\"])\r\n            this.context.fillStyle = 'rgba(' + particle.transform.rgb.r + ',' + particle.transform.rgb.g + ',' + particle.transform.rgb.b + ',' + particle.alpha + ')';\r\n        else\r\n            this.context.fillStyle = particle.color;\r\n\r\n        // draw circle\r\n        this.context.beginPath();\r\n        this.context.arc(particle.p.x, particle.p.y, particle.radius, 0, Math.PI * 2, true);\r\n\r\n        if (this.stroke) {\r\n            this.context.strokeStyle = this.stroke.color;\r\n            this.context.lineWidth = this.stroke.thinkness;\r\n            this.context.stroke();\r\n        }\r\n\r\n        this.context.closePath();\r\n        this.context.fill();\r\n    }\r\n\r\n    // private createBuffer --\r\n    createBuffer(image) {\r\n        if (image instanceof Image) {\r\n            const size = image.width + '_' + image.height;\r\n            let canvas = this.bufferCache[size];\r\n\r\n            if (!canvas) {\r\n                canvas = document.createElement('canvas');\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                this.bufferCache[size] = canvas;\r\n            }\r\n\r\n            return canvas;\r\n        }\r\n    }\r\n}","import Util from '../utils/Util';\r\nimport DomUtil from '../utils/DomUtil';\r\nimport ImgUtil from '../utils/ImgUtil';\r\nimport MathUtils from '../math/MathUtils';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nexport default class DomRenderer extends BaseRenderer {\r\n\r\n    constructor(element) {\r\n        super(element);\r\n\r\n        this.stroke = null;\r\n        this.pool.create = (body, particle) => this.createBody(body, particle);\r\n        this.addImg2Body = this.addImg2Body.bind(this);\r\n\r\n        this.transform3d = false;\r\n\r\n        this.name = 'DomRenderer';\r\n    }\r\n\r\n    onParticleCreated(particle) {\r\n        if (particle.body) {\r\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\r\n        } else {\r\n            particle.body = this.pool.get(this.circleConf, particle);\r\n            this.element.appendChild(particle.body);\r\n        }\r\n    }\r\n\r\n    onParticleUpdate(particle) {\r\n        if (this.bodyReady(particle)) {\r\n            if (this.transform3d)\r\n                DomUtil.transform3d(particle.body, particle.p.x, particle.p.y, particle.scale, particle.rotation);\r\n            else\r\n                DomUtil.transform(particle.body, particle.p.x, particle.p.y, particle.scale, particle.rotation);\r\n\r\n            particle.body.style.opacity = particle.alpha;\r\n            if (particle.body.isCircle) {\r\n                particle.body.style.backgroundColor = particle.color || '#ff0000';\r\n            }\r\n        }\r\n    }\r\n\r\n    onParticleDead(particle) {\r\n        if (this.bodyReady(particle)) {\r\n            this.element.removeChild(particle.body);\r\n            this.pool.expire(particle.body);\r\n            particle.body = null;\r\n        }\r\n    }\r\n\r\n    bodyReady(particle) {\r\n        return typeof particle.body === 'object' && particle.body && !particle.body.isInner;\r\n    }\r\n\r\n    // private \r\n    addImg2Body(img, particle) {\r\n        if (particle.dead) return;\r\n        particle.body = this.pool.get(img, particle);\r\n        DomUtil.resize(particle.body, img.width, img.height);\r\n\r\n        this.element.appendChild(particle.body);\r\n    }\r\n\r\n    createBody(body, particle) {\r\n        if (body.isCircle)\r\n            return this.createCircle(particle);\r\n        else\r\n            return this.createSprite(body, particle);\r\n    }\r\n\r\n    // private --\r\n    createCircle(particle) {\r\n        const dom = DomUtil.createDiv(`${particle.id}_dom`, 2 * particle.radius, 2 * particle.radius);\r\n        dom.style.borderRadius = `${particle.radius}px`;\r\n\r\n        if (this.stroke) {\r\n            dom.style.borderColor = this.stroke.color;\r\n            dom.style.borderWidth = `${this.stroke.thinkness}px`;\r\n        }\r\n        dom.isCircle = true;\r\n\r\n        return dom;\r\n    }\r\n\r\n    createSprite(body, particle) {\r\n        const url = typeof body === 'string' ? body : body.src;\r\n        const dom = DomUtil.createDiv(`${particle.id}_dom`, body.width, body.height);\r\n        dom.style.backgroundImage = `url(${url})`;\r\n\r\n        return dom;\r\n    }\r\n\r\n}","import Util from '../utils/Util';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nexport default class EaselRenderer extends BaseRenderer {\r\n\r\n    constructor(element, stroke) {\r\n        super(element);\r\n\r\n        this.stroke = stroke;\r\n        this.name = 'EaselRenderer';\r\n    }\r\n\r\n    onParticleCreated(particle) {\r\n        if (particle.body) {\r\n            this.createSprite(particle);\r\n        } else {\r\n            this.createCircle(particle);\r\n        }\r\n\r\n        this.element.addChild(particle.body);\r\n    }\r\n\r\n    onParticleUpdate(particle) {\r\n        if (particle.body) {\r\n            particle.body.x = particle.p.x;\r\n            particle.body.y = particle.p.y;\r\n\r\n            particle.body.alpha = particle.alpha;\r\n            particle.body.scaleX = particle.body.scaleY = particle.scale;\r\n            particle.body.rotation = particle.rotation;\r\n        }\r\n    }\r\n\r\n    onParticleDead(particle) {\r\n        if (particle.body) {\r\n            particle.body.parent && particle.body.parent.removeChild(particle.body);\r\n            this.pool.expire(particle.body);\r\n            particle.body = null;\r\n        }\r\n\r\n        if (particle.graphics) this.pool.expire(particle.graphics);\r\n    }\r\n\r\n    // private\r\n    createSprite(particle) {\r\n        particle.body = this.pool.get(particle.body);\r\n\r\n        if (particle.body.parent) return;\r\n        if (particle.body['image']) {\r\n            particle.body.regX = particle.body.image.width / 2;\r\n            particle.body.regY = particle.body.image.height / 2;\r\n        }\r\n    }\r\n\r\n    createCircle(particle) {\r\n        const graphics = this.pool.get(createjs.Graphics);\r\n\r\n        if (this.stroke) {\r\n            if (this.stroke instanceof String)\r\n                graphics.beginStroke(this.stroke);\r\n            else\r\n                graphics.beginStroke('#000000');\r\n        }\r\n        graphics.beginFill(particle.color || '#ff0000').drawCircle(0, 0, particle.radius);\r\n\r\n        const shape = this.pool.get(createjs.Shape, [graphics]);\r\n\r\n        particle.body = shape;\r\n        particle.graphics = graphics;\r\n    }\r\n\r\n}","import Util from '../utils/Util';\r\nimport Rectangle from '../math/Rectangle';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nexport default class PixelRenderer extends BaseRenderer {\r\n\r\n    constructor(element, rectangle) {\r\n        super(element);\r\n\r\n        this.context = this.element.getContext('2d');\r\n        this.imageData = null;\r\n        this.rectangle = null;\r\n        this.rectangle = rectangle;\r\n        this.createImageData(rectangle);\r\n\r\n        this.name = 'PixelRenderer';\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.element.width = width;\r\n        this.element.height = height;\r\n    }\r\n\r\n    createImageData(rectangle) {\r\n        this.rectangle = rectangle ? rectangle : new Rectangle(0, 0, this.element.width, this.element.height);\r\n        this.imageData = this.context.createImageData(this.rectangle.width, this.rectangle.height);\r\n        this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\r\n    }\r\n\r\n    onProtonUpdate() {\r\n        this.context.clearRect(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\r\n        this.imageData = this.context.getImageData(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\r\n    }\r\n\r\n    onProtonUpdateAfter() {\r\n        this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\r\n    }\r\n\r\n    onParticleCreated(particle) {}\r\n\r\n    onParticleUpdate(particle) {\r\n        if (this.imageData) {\r\n            this.setPixel(this.imageData, Math.floor(particle.p.x - this.rectangle.x), Math.floor(particle.p.y - this.rectangle.y), particle);\r\n        }\r\n    }\r\n\r\n    setPixel(imagedata, x, y, particle) {\r\n        const rgb = particle.transform.rgb;\r\n\r\n        if ((x < 0) || (x > this.element.width) || (y < 0) || (y > this.elementwidth))\r\n            return;\r\n\r\n        const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\r\n\r\n        imagedata.data[i] = rgb.r;\r\n        imagedata.data[i + 1] = rgb.g;\r\n        imagedata.data[i + 2] = rgb.b;\r\n        imagedata.data[i + 3] = particle.alpha * 255;\r\n    }\r\n\r\n    onParticleDead(particle) {\r\n\r\n    }\r\n\r\n}","import Pool from '../core/Pool';\r\nimport Util from '../utils/Util';\r\nimport ColorUtil from '../utils/ColorUtil';\r\nimport MathUtils from '../math/MathUtils';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nexport default class PixiRenderer extends BaseRenderer {\r\n\r\n    constructor(element, stroke) {\r\n        super(element);\r\n\r\n        this.stroke = stroke;\r\n        this.setColor = false;\r\n        this.pool.create = (body, particle) => this.createBody(body, particle);\r\n        this.name = 'PixiRenderer';\r\n    }\r\n\r\n    onProtonUpdate() { }\r\n\r\n    /**\r\n     * @param particle\r\n     */\r\n    onParticleCreated(particle) {\r\n        if (particle.body) {\r\n            particle.body = this.pool.get(particle.body, particle);\r\n        } else {\r\n            particle.body = this.pool.get(this.circleConf, particle);\r\n        }\r\n\r\n        this.element.addChild(particle.body);\r\n    }\r\n\r\n    /**\r\n     * @param particle\r\n     */\r\n    onParticleUpdate(particle) {\r\n        this.transform(particle, particle.body);\r\n        if (this.setColor) particle.body.tint = ColorUtil.getHex16FromParticle(particle);\r\n    }\r\n\r\n    /**\r\n     * @param particle\r\n     */\r\n    onParticleDead(particle) {\r\n        this.element.removeChild(particle.body);\r\n        this.pool.expire(particle.body);\r\n        particle.body = null;\r\n    }\r\n\r\n    destroy(particles) {\r\n        super.destroy();\r\n        this.pool.destroy();\r\n\r\n        let i = particles.length;\r\n        while (i--) {\r\n            let particle = particles[i];\r\n            if (particle.body) {\r\n                this.element.removeChild(particle.body);\r\n            }\r\n        }\r\n    }\r\n\r\n    transform(particle, target) {\r\n        target.x = particle.p.x;\r\n        target.y = particle.p.y;\r\n\r\n        target.alpha = particle.alpha;\r\n\r\n        target.scale.x = particle.scale;\r\n        target.scale.y = particle.scale;\r\n\r\n        // using cached version of MathUtils.PI_180 for slight performance increase.\r\n        target.rotation = particle.rotation * MathUtils.PI_180; // MathUtils.PI_180;\r\n    }\r\n\r\n    createBody(body, particle) {\r\n        if (body.isCircle)\r\n            return this.createCircle(particle);\r\n        else\r\n            return this.createSprite(body);\r\n    }\r\n\r\n    createSprite(body) {\r\n        const sprite = body.isInner ? PIXI.Sprite.fromImage(body.src) : new PIXI.Sprite(body);\r\n        sprite.anchor.x = 0.5;\r\n        sprite.anchor.y = 0.5;\r\n\r\n        return sprite;\r\n    }\r\n\r\n    createCircle(particle) {\r\n        const graphics = new PIXI.Graphics();\r\n\r\n        if (this.stroke) {\r\n            let stroke = this.stroke instanceof String ? this.stroke : 0x000000;\r\n            graphics.beginStroke(this.stroke);\r\n        }\r\n\r\n        graphics.beginFill(particle.color || 0x008ced);\r\n        graphics.drawCircle(0, 0, particle.radius);\r\n        graphics.endFill();\r\n\r\n        return graphics;\r\n    }\r\n}","import Mat3 from '../math/Mat3';\r\n\r\nexport default class MStack {\r\n\r\n\tconstructor() {\r\n\t\tthis.mats = [];\r\n\t\tthis.size = 0;\r\n\r\n\t\tfor (let i = 0; i < 20; i++) this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\r\n\t}\r\n\r\n\tset(m, i) {\r\n\t\tif (i == 0)\r\n\t\t\tMat3.set(m, this.mats[0]);\r\n\t\telse\r\n\t\t\tMat3.multiply(this.mats[i - 1], m, this.mats[i]);\r\n\r\n\t\tthis.size = Math.max(this.size, i + 1);\r\n\t}\r\n\r\n\tpush(m) {\r\n\t\tif (this.size == 0)\r\n\t\t\tMat3.set(m, this.mats[0]);\r\n\t\telse\r\n\t\t\tMat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\r\n\r\n\t\tthis.size++;\r\n\t}\r\n\r\n\tpop() {\r\n\t\tif (this.size > 0)\r\n\t\t\tthis.size--;\r\n\t}\r\n\r\n\ttop() {\r\n\t\treturn (this.mats[this.size - 1]);\r\n\t}\r\n}","import Mat3 from '../math/Mat3';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nimport Util from '../utils/Util';\r\nimport ImgUtil from '../utils/ImgUtil';\r\nimport MStack from '../utils/MStack';\r\nimport DomUtil from '../utils/DomUtil';\r\nimport WebGLUtil from '../utils/WebGLUtil';\r\nimport MathUtils from '../math/MathUtils';\r\n\r\nexport default class WebGLRenderer extends BaseRenderer {\r\n\r\n    constructor(element) {\r\n        super(element);\r\n\r\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\r\n        if (!this.gl) alert(\"Sorry your browser do not suppest WebGL!\");\r\n\r\n        this.initVar();\r\n        this.setMaxRadius();\r\n        this.initShaders();\r\n        this.initBuffers();\r\n\r\n        this.gl.blendEquation(this.gl.FUNC_ADD);\r\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        this.gl.enable(this.gl.BLEND);\r\n\r\n        this.addImg2Body = this.addImg2Body.bind(this);\r\n\r\n        this.name = 'WebGLRenderer';\r\n    }\r\n\r\n    init(proton) {\r\n        super.init(proton);\r\n        this.resize(this.element.width, this.element.height);\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.umat[4] = -2;\r\n        this.umat[7] = 1;\r\n\r\n        this.smat[0] = 1 / width;\r\n        this.smat[4] = 1 / height;\r\n\r\n        this.mstack.set(this.umat, 0);\r\n        this.mstack.set(this.smat, 1);\r\n\r\n        this.gl.viewport(0, 0, width, height);\r\n        this.element.width = width;\r\n        this.element.height = height;\r\n    }\r\n\r\n    setMaxRadius(radius) {\r\n        this.circleCanvasURL = this.createCircle(radius);\r\n    }\r\n\r\n    getVertexShader() {\r\n        const vsSource = [\"uniform vec2 viewport;\", \"attribute vec2 aVertexPosition;\", \"attribute vec2 aTextureCoord;\", \"uniform mat3 tMat;\", \"varying vec2 vTextureCoord;\", \"varying float alpha;\", \"void main() {\", \"vec3 v = tMat * vec3(aVertexPosition, 1.0);\", \"gl_Position = vec4(v.x, v.y, 0, 1);\", \"vTextureCoord = aTextureCoord;\", \"alpha = tMat[0][2];\", \"}\"].join(\"\\n\");\r\n        return vsSource;\r\n    }\r\n\r\n    getFragmentShader() {\r\n        const fsSource = [\"precision mediump float;\", \"varying vec2 vTextureCoord;\", \"varying float alpha;\", \"uniform sampler2D uSampler;\", \"uniform vec4 color;\", \"uniform bool useTexture;\", \"uniform vec3 uColor;\", \"void main() {\", \"vec4 textureColor = texture2D(uSampler, vTextureCoord);\", \"gl_FragColor = textureColor * vec4(uColor, 1.0);\", \"gl_FragColor.w *= alpha;\", \"}\"].join(\"\\n\");\r\n        return fsSource;\r\n    }\r\n\r\n    initVar() {\r\n        this.mstack = new MStack();\r\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\r\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\r\n        this.texturebuffers = {};\r\n    }\r\n\r\n    blendEquation(A) {\r\n        this.gl.blendEquation(this.gl[A]);\r\n    }\r\n\r\n    blendFunc(A, B) {\r\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\r\n    }\r\n\r\n    getShader(gl, str, fs) {\r\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\r\n\r\n        gl.shaderSource(shader, str);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            alert(gl.getShaderInfoLog(shader));\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    initShaders() {\r\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\r\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\r\n\r\n        this.sprogram = this.gl.createProgram();\r\n        this.gl.attachShader(this.sprogram, vertexShader);\r\n        this.gl.attachShader(this.sprogram, fragmentShader);\r\n        this.gl.linkProgram(this.sprogram);\r\n\r\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\r\n            alert(\"Could not initialise shaders\");\r\n\r\n        this.gl.useProgram(this.sprogram);\r\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, \"aVertexPosition\");\r\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, \"aTextureCoord\");\r\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\r\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\r\n\r\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, \"tMat\");\r\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, \"uSampler\");\r\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, \"useTexture\");\r\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, \"uColor\");\r\n        this.gl.uniform1i(this.sprogram.useTex, 1);\r\n    };\r\n\r\n    initBuffers() {\r\n        const vs = [0, 3, 1, 0, 2, 3];\r\n        let idx;\r\n\r\n        this.unitIBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\r\n\r\n        let i;\r\n        let ids = [];\r\n        for (i = 0; i < 100; i++) ids.push(i);\r\n        idx = new Uint16Array(ids);\r\n\r\n        this.unitI33 = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\r\n\r\n        ids = [];\r\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\r\n        idx = new Uint16Array(ids);\r\n\r\n        this.stripBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\r\n    };\r\n\r\n    createCircle(raidus) {\r\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\r\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\r\n        const context = canvas.getContext('2d');\r\n\r\n        context.beginPath();\r\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\r\n        context.closePath();\r\n        context.fillStyle = '#FFF';\r\n        context.fill();\r\n\r\n        return canvas.toDataURL();\r\n    };\r\n\r\n    drawImg2Canvas(particle) {\r\n        const _w = particle.body.width;\r\n        const _h = particle.body.height;\r\n\r\n        const _width = WebGLUtil.nhpot(particle.body.width);\r\n        const _height = WebGLUtil.nhpot(particle.body.height);\r\n\r\n        const _scaleX = particle.body.width / _width;\r\n        const _scaleY = particle.body.height / _height;\r\n\r\n        if (!this.texturebuffers[particle.transform.src])\r\n            this.texturebuffers[particle.transform.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\r\n\r\n        particle.transform.texture = this.texturebuffers[particle.transform.src][0];\r\n        particle.transform.vcBuffer = this.texturebuffers[particle.transform.src][1];\r\n        particle.transform.tcBuffer = this.texturebuffers[particle.transform.src][2];\r\n\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.tcBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.vcBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\r\n\r\n        const context = particle.transform.canvas.getContext('2d');\r\n        const data = context.getImageData(0, 0, _width, _height);\r\n\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.transform.texture);\r\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\r\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\r\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n\r\n        particle.transform.textureLoaded = true;\r\n        particle.transform.textureWidth = _w;\r\n        particle.transform.textureHeight = _h;\r\n    }\r\n\r\n    onProtonUpdate() {\r\n        //this.gl.clearColor(0, 0, 0, 1);\r\n        //this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    onParticleCreated(particle) {\r\n        particle.transform.textureLoaded = false;\r\n        particle.transform.tmat = Mat3.create();\r\n        particle.transform.tmat[8] = 1;\r\n        particle.transform.imat = Mat3.create();\r\n        particle.transform.imat[8] = 1;\r\n\r\n        if (particle.body) {\r\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\r\n        } else {\r\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\r\n            particle.transform.oldScale = particle.radius / this.circleCanvasRadius;\r\n        }\r\n    }\r\n\r\n    // private \r\n    addImg2Body(img, particle) {\r\n        if (particle.dead) return;\r\n        \r\n        particle.body = img;\r\n        particle.transform.src = img.src;\r\n        particle.transform.canvas = ImgUtil.getCanvasFromCache(img);\r\n        particle.transform.oldScale = 1;\r\n\r\n        this.drawImg2Canvas(particle);\r\n    }\r\n\r\n    onParticleUpdate(particle) {\r\n        if (particle.transform.textureLoaded) {\r\n            this.updateMatrix(particle);\r\n\r\n            this.gl.uniform3f(this.sprogram.color, particle.transform.rgb.r / 255, particle.transform.rgb.g / 255, particle.transform.rgb.b / 255);\r\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\r\n\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.vcBuffer);\r\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.tcBuffer);\r\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.transform.texture);\r\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\r\n\r\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\r\n\r\n            this.mstack.pop();\r\n        }\r\n    }\r\n\r\n    onParticleDead(particle) { }\r\n\r\n    updateMatrix(particle) {\r\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.transform.textureWidth / 2, -particle.transform.textureHeight / 2);\r\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\r\n\r\n        const angel = particle.rotation * (MathUtils.PI_180);\r\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\r\n\r\n        const scale = particle.scale * particle.transform.oldScale;\r\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\r\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\r\n\r\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\r\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\r\n\r\n        Mat3.inverse(matrix, particle.transform.imat);\r\n        matrix[2] = particle.alpha;\r\n\r\n        this.mstack.push(matrix);\r\n    }\r\n}","import Util from '../utils/Util';\r\nimport BaseRenderer from './BaseRenderer';\r\n\r\nexport default class CustomRenderer extends BaseRenderer {\r\n\r\n    constructor(element) {\r\n        super(element);\r\n\r\n        this.name = 'CustomRenderer';\r\n    }\r\n\r\n}","import Zone from './Zone';\r\nimport Util from '../utils/Util';\r\nimport MathUtils from '../math/MathUtils';\r\n\r\nexport default class LineZone extends Zone {\r\n\r\n\tconstructor(x1, y1, x2, y2, direction) {\r\n\t\tsuper();\r\n\r\n\t\tif (x2 - x1 >= 0) {\r\n\t\t\tthis.x1 = x1;\r\n\t\t\tthis.y1 = y1;\r\n\t\t\tthis.x2 = x2;\r\n\t\t\tthis.y2 = y2;\r\n\t\t} else {\r\n\t\t\tthis.x1 = x2;\r\n\t\t\tthis.y1 = y2;\r\n\t\t\tthis.x2 = x1;\r\n\t\t\tthis.y2 = y1;\r\n\t\t}\r\n\r\n\t\tthis.dx = this.x2 - this.x1;\r\n\t\tthis.dy = this.y2 - this.y1;\r\n\r\n\t\tthis.minx = Math.min(this.x1, this.x2);\r\n\t\tthis.miny = Math.min(this.y1, this.y2);\r\n\t\tthis.maxx = Math.max(this.x1, this.x2);\r\n\t\tthis.maxy = Math.max(this.y1, this.y2);\r\n\r\n\t\tthis.dot = this.x2 * this.y1 - this.x1 * this.y2;\r\n\t\tthis.xxyy = this.dx * this.dx + this.dy * this.dy;\r\n\r\n\t\tthis.gradient = this.getGradient();\r\n\t\tthis.length = this.getLength();\r\n\t\tthis.direction = Util.initValue(direction, '>');\r\n\t}\r\n\r\n\r\n\tgetPosition() {\r\n\t\tthis.random = Math.random();\r\n\t\tthis.vector.x = this.x1 + this.random * this.length * Math.cos(this.gradient);\r\n\t\tthis.vector.y = this.y1 + this.random * this.length * Math.sin(this.gradient);\r\n\r\n\t\treturn this.vector;\r\n\t}\r\n\r\n\tgetDirection(x, y) {\r\n\t\tconst A = this.dy;\r\n\t\tconst B = -this.dx;\r\n\t\tconst C = this.dot;\r\n\t\tconst D = B == 0 ? 1 : B;\r\n\r\n\t\tif ((A * x + B * y + C) * D > 0)\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\tgetDistance(x, y) {\r\n\t\tconst A = this.dy;\r\n\t\tconst B = -this.dx;\r\n\t\tconst C = this.dot;\r\n\t\tconst D = (A * x + B * y + C);\r\n\r\n\t\treturn D / Math.sqrt(this.xxyy);\r\n\t}\r\n\r\n\tgetSymmetric(v) {\r\n\t\tconst tha2 = v.getGradient();\r\n\t\tconst tha1 = this.getGradient();\r\n\t\tconst tha = 2 * (tha1 - tha2);\r\n\r\n\t\tconst oldx = v.x;\r\n\t\tconst oldy = v.y;\r\n\r\n\t\tv.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\r\n\t\tv.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\r\n\r\n\t\treturn v;\r\n\t}\r\n\r\n\tgetGradient() {\r\n\t\treturn Math.atan2(this.dy, this.dx);\r\n\t}\r\n\r\n\trangeOut(particle) {\r\n\t\tconst angle = Math.abs(this.getGradient());\r\n\r\n\t\tif (angle <= MathUtils.PI / 4) {\r\n\t\t\tif (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\r\n\t\t} else {\r\n\t\t\tif (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetLength() {\r\n\t\treturn Math.sqrt(this.dx * this.dx + this.dy * this.dy)\r\n\t}\r\n\r\n\tcrossing(particle) {\r\n\t\tif (this.crossType == \"dead\") {\r\n\t\t\tif (this.direction == \">\" || this.direction == \"R\" || this.direction == \"right\" || this.direction == \"down\") {\r\n\t\t\t\tif (!this.rangeOut(particle)) return;\r\n\t\t\t\tif (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.rangeOut(particle)) return;\r\n\t\t\t\tif (!this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (this.crossType == \"bound\") {\r\n\t\t\tif (!this.rangeOut(particle)) return;\r\n\r\n\t\t\tif (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\r\n\t\t\t\tif (this.dx == 0) {\r\n\t\t\t\t\tparticle.v.x *= -1;\r\n\t\t\t\t} else if (this.dy == 0) {\r\n\t\t\t\t\tparticle.v.y *= -1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.getSymmetric(particle.v);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (this.crossType == \"cross\") {\r\n\t\t\tif (this.alert) {\r\n\t\t\t\tconsole.error('Sorry lineZone does not support cross method');\r\n\t\t\t\tthis.alert = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","import Zone from './Zone';\r\nimport MathUtils from '../math/MathUtils';\r\n\r\nexport default class CircleZone extends Zone {\r\n\r\n    constructor(x, y, radius) {\r\n        super();\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n\r\n        this.angle = 0;\r\n        this.center = { x, y };\r\n    }\r\n\r\n    getPosition() {\r\n        this.random = Math.random();\r\n        this.angle = MathUtils.PIx2 * Math.random();\r\n\r\n        this.vector.x = this.x + this.random * this.radius * Math.cos(this.angle);\r\n        this.vector.y = this.y + this.random * this.radius * Math.sin(this.angle);\r\n\r\n        return this.vector;\r\n    }\r\n\r\n    setCenter(x, y) {\r\n        this.center.x = x;\r\n        this.center.y = y;\r\n    }\r\n\r\n    crossing(particle) {\r\n        const d = particle.p.distanceTo(this.center);\r\n\r\n        if (this.crossType == \"dead\") {\r\n            if (d - particle.radius > this.radius)\r\n                particle.dead = true;\r\n        } else if (this.crossType == \"bound\") {\r\n            if (d + particle.radius >= this.radius)\r\n                this.getSymmetric(particle);\r\n        } else if (this.crossType == \"cross\") {\r\n            if (this.alert) {\r\n                alert('Sorry CircleZone does not support cross method');\r\n                this.alert = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getSymmetric(particle) {\r\n        let tha2 = particle.v.getGradient();\r\n        let tha1 = this.getGradient(particle);\r\n\r\n        let tha = 2 * (tha1 - tha2);\r\n        let oldx = particle.v.x;\r\n        let oldy = particle.v.y;\r\n\r\n        particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\r\n        particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\r\n    }\r\n\r\n    getGradient(particle) {\r\n        return -MathUtils.PI_2 + Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x);\r\n    }\r\n}","import Zone from './Zone';\r\n\r\nexport default class RectZone extends Zone {\r\n\r\n\tconstructor(x, y, width, height) {\r\n\t\tsuper();\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tgetPosition() {\r\n\t\tthis.vector.x = this.x + Math.random() * this.width;\r\n\t\tthis.vector.y = this.y + Math.random() * this.height;\r\n\r\n\t\treturn this.vector;\r\n\t}\r\n\r\n\tcrossing(particle) {\r\n\t\tif (this.crossType == \"dead\") {\r\n\t\t\tif (particle.p.x + particle.radius < this.x)\r\n\t\t\t\tparticle.dead = true;\r\n\t\t\telse if (particle.p.x - particle.radius > this.x + this.width)\r\n\t\t\t\tparticle.dead = true;\r\n\r\n\t\t\tif (particle.p.y + particle.radius < this.y)\r\n\t\t\t\tparticle.dead = true;\r\n\t\t\telse if (particle.p.y - particle.radius > this.y + this.height)\r\n\t\t\t\tparticle.dead = true;\r\n\t\t}\r\n\r\n\t\telse if (this.crossType == \"bound\") {\r\n\t\t\tif (particle.p.x - particle.radius < this.x) {\r\n\t\t\t\tparticle.p.x = this.x + particle.radius;\r\n\t\t\t\tparticle.v.x *= -1;\r\n\t\t\t} else if (particle.p.x + particle.radius > this.x + this.width) {\r\n\t\t\t\tparticle.p.x = this.x + this.width - particle.radius;\r\n\t\t\t\tparticle.v.x *= -1;\r\n\t\t\t}\r\n\r\n\t\t\tif (particle.p.y - particle.radius < this.y) {\r\n\t\t\t\tparticle.p.y = this.y + particle.radius;\r\n\t\t\t\tparticle.v.y *= -1;\r\n\t\t\t} else if (particle.p.y + particle.radius > this.y + this.height) {\r\n\t\t\t\tparticle.p.y = this.y + this.height - particle.radius;\r\n\t\t\t\tparticle.v.y *= -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (this.crossType == \"cross\") {\r\n\t\t\tif (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\r\n\t\t\t\tparticle.p.x = this.x + this.width + particle.radius;\r\n\t\t\telse if (particle.p.x - particle.radius > this.x + this.width && particle.v.x >= 0)\r\n\t\t\t\tparticle.p.x = this.x - particle.radius;\r\n\r\n\t\t\tif (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\r\n\t\t\t\tparticle.p.y = this.y + this.height + particle.radius;\r\n\t\t\telse if (particle.p.y - particle.radius > this.y + this.height && particle.v.y >= 0)\r\n\t\t\t\tparticle.p.y = this.y - particle.radius;\r\n\t\t}\r\n\t}\r\n}","import Zone from './Zone';\r\nimport Util from '../utils/Util';\r\n\r\nexport default class ImageZone extends Zone {\r\n\r\n\tconstructor(imageData, x, y, d) {\r\n\t\tsuper();\r\n\r\n\t\tthis.reset(imageData, x, y, d);\r\n\t}\r\n\r\n\treset(imageData, x, y, d) {\r\n\t\tthis.imageData = imageData;\r\n\t\tthis.x = Util.initValue(x, 0);\r\n\t\tthis.y = Util.initValue(y, 0);\r\n\t\tthis.d = Util.initValue(d, 2);\r\n\r\n\t\tthis.vectors = [];\r\n\t\tthis.setVectors();\r\n\t}\r\n\r\n\tsetVectors() {\r\n\t\tlet i, j;\r\n\t\tconst length1 = this.imageData.width;\r\n\t\tconst length2 = this.imageData.height;\r\n\r\n\t\tfor (i = 0; i < length1; i += this.d) {\r\n\t\t\tfor (j = 0; j < length2; j += this.d) {\r\n\t\t\t\tlet index = ((j >> 0) * length1 + (i >> 0)) * 4;\r\n\r\n\t\t\t\tif (this.imageData.data[index + 3] > 0) {\r\n\t\t\t\t\tthis.vectors.push({ x: i + this.x, y: j + this.y });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.vector;\r\n\t}\r\n\r\n\tgetBound(x, y) {\r\n\t\tvar index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\r\n\t\tif (this.imageData.data[index + 3] > 0)\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\tgetPosition() {\r\n\t\treturn this.vector.copy(this.vectors[Math.floor(Math.random() * this.vectors.length)]);\r\n\t}\r\n\r\n\tgetColor(x, y) {\r\n\t\tx -= this.x;\r\n\t\ty -= this.y;\r\n\t\tvar i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\r\n\r\n\t\treturn {\r\n\t\t\tr: this.imageData.data[i],\r\n\t\t\tg: this.imageData.data[i + 1],\r\n\t\t\tb: this.imageData.data[i + 2],\r\n\t\t\ta: this.imageData.data[i + 3]\r\n\t\t};\r\n\t}\r\n\r\n\tcrossing(particle) {\r\n\t\tif (this.crossType == \"dead\") {\r\n\t\t\tif (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\r\n\t\t\t\tparticle.dead = true;\r\n\t\t\telse\r\n\t\t\t\tparticle.dead = false;\r\n\t\t} \r\n\t\t\r\n\t\telse if (this.crossType == \"bound\") {\r\n\t\t\tif (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\r\n\t\t\t\tparticle.v.negate();\r\n\t\t}\r\n\t}\r\n}","import Util from '../utils/Util';\r\nimport ColorUtil from '../utils/ColorUtil';\r\nimport MathUtils from '../math/MathUtils';\r\nimport CircleZone from '../zone/CircleZone';\r\nimport PointZone from '../zone/PointZone';\r\nimport LineZone from '../zone/LineZone';\r\nimport RectZone from '../zone/RectZone';\r\n\r\nexport default {\r\n\taddEventListener(proton, fun) {\r\n\t\tproton.addEventListener(\"PROTON_UPDATE_AFTER\", () => fun());\r\n\t},\r\n\r\n\tgetStyle(color) {\r\n\t\tconst rgb = ColorUtil.hexToRGB(color || '#ff0000');\r\n\t\treturn `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\r\n\t},\r\n\t\r\n\tdrawZone(proton, canvas, zone, clear) {\r\n\t\tconst context = canvas.getContext('2d');\r\n\t\tconst style = this.getStyle();\r\n\r\n\t\tthis.addEventListener(proton, () => {\r\n\t\t\tif (clear)\r\n\t\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\tif (zone instanceof PointZone) {\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.fillStyle = style;\r\n\t\t\t\tcontext.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\r\n\t\t\t\tcontext.fill();\r\n\t\t\t\tcontext.closePath();\r\n\t\t\t} else if (zone instanceof LineZone) {\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.strokeStyle = style;\r\n\t\t\t\tcontext.moveTo(zone.x1, zone.y1);\r\n\t\t\t\tcontext.lineTo(zone.x2, zone.y2);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t\tcontext.closePath();\r\n\t\t\t} else if (zone instanceof RectZone) {\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.strokeStyle = style;\r\n\t\t\t\tcontext.drawRect(zone.x, zone.y, zone.width, zone.height);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t\tcontext.closePath();\r\n\t\t\t} else if (zone instanceof CircleZone) {\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.strokeStyle = style;\r\n\t\t\t\tcontext.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t\tcontext.closePath();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\t\r\n\tdrawEmitter(proton, canvas, emitter, clear) {\r\n\t\tconst context = canvas.getContext('2d');\r\n\t\tconst style = this.getStyle();\r\n\r\n\t\tthis.addEventListener(proton, () => {\r\n\t\t\tif (clear) context.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\t\t\r\n\t\t\tcontext.beginPath();\r\n\t\t\tcontext.fillStyle = style;\r\n\t\t\tcontext.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\r\n\t\t\tcontext.fill();\r\n\t\t\tcontext.closePath();\r\n\t\t});\r\n\t},\r\n}\r\n\r\n","// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n\r\n// requestAnimationFrame polyfill by Erik Möller\r\n// fixes from Paul Irish and Tino Zijdel\r\n( function() {\r\n\t\tvar lastTime = 0;\r\n\t\tvar vendors = ['ms', 'moz', 'webkit', 'o'];\r\n\t\tfor (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n\t\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\r\n\t\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\r\n\t\t}\r\n\r\n\t\tif (!window.requestAnimationFrame)\r\n\t\t\twindow.requestAnimationFrame = function(callback, element) {\r\n\t\t\t\tvar currTime = new Date().getTime();\r\n\t\t\t\tvar timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n\t\t\t\tvar id = window.setTimeout(function() {\r\n\t\t\t\t\tcallback(currTime + timeToCall);\r\n\t\t\t\t}, timeToCall);\r\n\t\t\t\tlastTime = currTime + timeToCall;\r\n\t\t\t\treturn id;\r\n\t\t\t};\r\n\r\n\t\tif (!window.cancelAnimationFrame)\r\n\t\t\twindow.cancelAnimationFrame = function(id) {\r\n\t\t\t\tclearTimeout(id);\r\n\t\t\t};\r\n\t}()); ","// import \r\nimport Proton from \"./core/Proton\";\r\nimport Particle from \"./core/Particle\";\r\nimport Pool from \"./core/Pool\";\r\n\r\nimport Util from \"./utils/Util\";\r\nimport ColorUtil from \"./utils/ColorUtil\";\r\nimport MathUtils from \"./math/MathUtils\";\r\nimport Vector2D from \"./math/Vector2D\";\r\nimport Polar2D from \"./math/Polar2D\";\r\nimport Mat3 from \"./math/Mat3\";\r\nimport Span from \"./math/Span\";\r\nimport ArraySpan from \"./math/ArraySpan\";\r\nimport Rectangle from \"./math/Rectangle\";\r\nimport ease from \"./math/ease\";\r\n\r\nimport Rate from \"./initialize/Rate\";\r\nimport Initialize from \"./initialize/Initialize\";\r\nimport Life from \"./initialize/Life\";\r\nimport Position from \"./initialize/Position\";\r\nimport Velocity from \"./initialize/Velocity\";\r\nimport Mass from \"./initialize/Mass\";\r\nimport Radius from \"./initialize/Radius\";\r\nimport Body from \"./initialize/Body\";\r\n\r\nimport Behaviour from \"./behaviour/Behaviour\";\r\nimport Force from \"./behaviour/Force\";\r\nimport Attraction from \"./behaviour/Attraction\";\r\nimport RandomDrift from \"./behaviour/RandomDrift\";\r\nimport Gravity from \"./behaviour/Gravity\";\r\nimport Collision from \"./behaviour/Collision\";\r\nimport CrossZone from \"./behaviour/CrossZone\";\r\nimport Alpha from \"./behaviour/Alpha\";\r\nimport Scale from \"./behaviour/Scale\";\r\nimport Rotate from \"./behaviour/Rotate\";\r\nimport Color from \"./behaviour/Color\";\r\nimport Repulsion from \"./behaviour/Repulsion\";\r\nimport GravityWell from \"./behaviour/GravityWell\";\r\n\r\nimport Emitter from \"./emitter/Emitter\";\r\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\r\nimport FollowEmitter from \"./emitter/FollowEmitter\";\r\n\r\nimport CanvasRenderer from \"./render/CanvasRenderer\";\r\nimport DomRenderer from \"./render/DomRenderer\";\r\nimport EaselRenderer from \"./render/EaselRenderer\";\r\nimport PixelRenderer from \"./render/PixelRenderer\";\r\nimport PixiRenderer from \"./render/PixiRenderer\";\r\nimport WebGLRenderer from \"./render/WebGLRenderer\";\r\nimport CustomRenderer from \"./render/CustomRenderer\";\r\n\r\nimport Zone from \"./zone/Zone\";\r\nimport LineZone from \"./zone/LineZone\";\r\nimport CircleZone from \"./zone/CircleZone\";\r\nimport PointZone from \"./zone/PointZone\";\r\nimport RectZone from \"./zone/RectZone\";\r\nimport ImageZone from \"./zone/ImageZone\";\r\n\r\nimport Debug from \"./debug/Debug\";\r\nimport \"./polyfill/requestAnimationFrame\";\r\n\r\n// namespace\r\nProton.Particle = Proton.P = Particle;\r\nProton.Pool = Pool;\r\n\r\nProton.Util = Util;\r\nProton.ColorUtil = ColorUtil;\r\nProton.MathUtils = MathUtils;\r\nProton.Vector2D = Proton.Vector = Vector2D;\r\nProton.Polar2D = Proton.Polar = Polar2D;\r\nProton.ArraySpan = ArraySpan;\r\nProton.Rectangle = Rectangle;\r\nProton.Rate = Rate;\r\nProton.ease = ease;\r\nProton.Span = Span;\r\nProton.Mat3 = Mat3;\r\nProton.getSpan = (a, b, center) => new Span(a, b, center);\r\nProton.createArraySpan = ArraySpan.createArraySpan;\r\n\r\nProton.Initialize = Proton.Init = Initialize;\r\nProton.Life = Proton.L = Life;\r\nProton.Position = Proton.P = Position;\r\nProton.Velocity = Proton.V = Velocity;\r\nProton.Mass = Proton.M = Mass;\r\nProton.Radius = Proton.R = Radius;\r\nProton.Body = Proton.B = Body;\r\n\r\nProton.Behaviour = Behaviour;\r\nProton.Force = Proton.F = Force;\r\nProton.Attraction = Proton.A = Attraction;\r\nProton.RandomDrift = Proton.RD = RandomDrift;\r\nProton.Gravity = Proton.G = Gravity;\r\nProton.Collision = Collision;\r\nProton.CrossZone = CrossZone;\r\nProton.Alpha = Proton.A = Alpha;\r\nProton.Scale = Proton.S = Scale;\r\nProton.Rotate = Rotate;\r\nProton.Color = Color;\r\nProton.Repulsion = Repulsion;\r\nProton.GravityWell = GravityWell;\r\n\r\nProton.Emitter = Emitter;\r\nProton.BehaviourEmitter = BehaviourEmitter;\r\nProton.FollowEmitter = FollowEmitter;\r\n\r\nProton.Zone = Zone;\r\nProton.LineZone = LineZone;\r\nProton.CircleZone = CircleZone;\r\nProton.PointZone = PointZone;\r\nProton.RectZone = RectZone;\r\nProton.ImageZone = ImageZone;\r\n\r\nProton.CanvasRenderer = CanvasRenderer;\r\nProton.DomRenderer = DomRenderer;\r\nProton.EaselRenderer = EaselRenderer;\r\nProton.PixiRenderer = PixiRenderer;\r\nProton.PixelRenderer = PixelRenderer;\r\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\r\nProton.CustomRenderer = CustomRenderer;\r\n\r\nProton.Debug = Debug;\r\n\r\nObject.assign(Proton, ease);\r\n\r\n// export\r\nexport default Proton;"],"names":["PI","MathUtils","a","b","INT","Math","floor","random","center","f","this","randomAToB","display","num","toString","slice","Vector2D","x","y","atan2","PI_2","v","w","undefined","addVectors","subVectors","s","set","multiplyScalar","sqrt","divideScalar","length","distanceToSquared","tha","cos","sin","dx","dy","alpha","Span","isArray","Util","initValue","randomFloating","i","tx","ty","angleInRadians","c","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","IMG_CACHE","CANVAS_CACHE","context","image","rect","drawImage","imagedata","getImageData","clearRect","img","callback","param","src","Image","onload","e","target","WebGLUtil","canvas","DomUtil","createCanvas","getContext","value","defaults","Object","prototype","call","array","obj","ignore","o","indexOf","constructor","args","concat","bind","apply","pOBJ","hasProp","p","particle","copy","prototypeObject","filters","singleProp","hasOwnProperty","getSpanValue","pan","getValue","ImgUtil","arr","destroy","uid","getCacheID","cache","isInner","Pool","total","params","__puid","PUID","getID","pop","createOrClone","getCache","push","create","classApply","clone","count","Stats","proton","container","type","emitterIndex","rendererIndex","body","add","emitter","getEmitter","renderer","getRenderer","str","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","innerHTML","cssText","join","addEventListener","_this","bg","color","parentNode","appendChild","renderers","result","cpool","round","EventDispatcher","_listeners","listener","removeEventListener","splice","listeners","handler","TargetClass","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","sleep","old","mass","clear","Proton","integrationType","oldTime","elapsed","stats","EULER","integrator","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","PROTON_UPDATE","USE_CLOCK","Date","getTime","amendChangeTabsBug","emittersUpdate","PROTON_UPDATE_AFTER","update","getAllParticles","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","pow","ease","easeLinear","Particle","ID","reset","setPrototypeByObject","N180_PI","life","Infinity","age","energy","dead","sprite","radius","rotation","easing","destroyObject","removeAllBehaviours","rgb","r","g","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","destroyArray","h","hex16","substring","parseInt","rbg","Number","Polar2D","abs","getX","getY","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","Rectangle","bottom","right","Rate","numpan","timepan","numPan","setSpanValue","timePan","startTime","nextTime","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","PI_180","Mass","massPan","Radius","oldRadius","Body","imagetarget","inner","Behaviour","getEasing","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","newPool","otherParticle","overlap","totalMass","averageMass1","averageMass2","distance","CrossZone","crossing","Alpha","same","alphaA","alphaB","Scale","scaleA","scaleB","Rotate","influence","rotationA","rotationB","getDirection","Color","createArraySpan","colorA","ColorUtil","hexToRGB","colorB","Repulsion","GravityWell","centerPoint","distanceVec","distanceSq","factor","bindEmitter","setVector2DByObject","degreeTransform","Emitter","pObj","emitTime","totalTime","rate","stoped","isNaN","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","get","setupParticle","addBehaviours","stop","slow","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mouseTarget","window","_allowEmitting","initEventHandler","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","layerX","layerY","offsetX","offsetY","babelHelpers.get","BaseRenderer","element","stroke","initHandler","circleConf","isCircle","thinkness","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","CanvasRenderer","bufferCache","addImg2Body","drawCircle","buffer","createBuffer","bufferContext","globalAlpha","globalCompositeOperation","fillStyle","rgbToHex","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","DomRenderer","createBody","transform3d","bodyReady","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","String","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","data","PixiRenderer","setColor","tint","getHex16FromParticle","PIXI","Sprite","fromImage","anchor","endFill","MStack","mats","Mat3","multiply","WebGLRenderer","gl","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","umat","smat","mstack","viewport","circleCanvasURL","texturebuffers","A","B","fs","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","CustomRenderer","LineZone","x1","y1","x2","y2","direction","minx","min","miny","maxx","maxy","dot","xxyy","gradient","getGradient","getLength","tha2","oldx","oldy","rangeOut","getDistance","getSymmetric","error","CircleZone","angle","PIx2","d","distanceTo","RectZone","ImageZone","vectors","setVectors","j","length1","length2","getBound","negate","fun","getStyle","moveTo","lineTo","drawRect","lastTime","vendors","requestAnimationFrame","cancelAnimationFrame","currTime","timeToCall","setTimeout","P","Vector","Polar","getSpan","Init","L","V","M","R","F","RD","G","S","WebGlRenderer","Debug","assign"],"mappings":"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"}